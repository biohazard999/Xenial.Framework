using System;

using DevExpress.Persistent.Base;

using Xenial.Framework.ModelBuilders;
using Xenial.Framework.WebView.PubTernal;

namespace Xenial.Framework.ModelBuilders
{
    /// <summary>
    /// Class PropertyBuilderExtensions.
    /// </summary>
    /// <autogeneratedoc />
    public static class PropertyBuilderExtensions
    {
        /// <summary>
        /// Usings the web view property editor.
        /// </summary>
        /// <typeparam name="TClassType">The type of the t class type.</typeparam>
        /// <param name="builder">The builder.</param>
        /// <returns>IPropertyBuilder&lt;Uri, TClassType&gt;.</returns>
        /// <exception cref="ArgumentNullException">builder</exception>
        /// <autogeneratedoc />
        public static IPropertyBuilder<Uri?, TClassType> UsingWebViewUriPropertyEditor<TClassType>(this IPropertyBuilder<Uri?, TClassType> builder)
            => builder.UsingEditorAlias(WebViewEditorAliases.WebViewUriPropertyEditor);

        /// <summary>
        /// Usings the web view HTML string property editor.
        /// </summary>
        /// <typeparam name="TClassType">The type of the t class type.</typeparam>
        /// <param name="builder">The builder.</param>
        /// <returns>IPropertyBuilder&lt;System.Nullable&lt;System.String&gt;, TClassType&gt;.</returns>
        /// <autogeneratedoc />
        public static IPropertyBuilder<string?, TClassType> UsingWebViewHtmlStringPropertyEditor<TClassType>(this IPropertyBuilder<string?, TClassType> builder)
            => builder.UsingEditorAlias(WebViewEditorAliases.WebViewHtmlStringPropertyEditor);
    }
}
