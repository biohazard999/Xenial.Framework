using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Blazor;
using DevExpress.ExpressApp.SystemModule;
using DevExpress.XtraPrinting.Native.Extensions;

using Microsoft.JSInterop;

using Xenial.Framework.Badges.Model;

namespace Xenial.Framework.Badges.Blazor
{
    /// <summary>
    /// Class NavItem. This class cannot be inherited.
    /// </summary>
    /// <autogeneratedoc />
    public sealed class NavItem
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NavItem"/> class.
        /// </summary>
        /// <param name="caption">The caption.</param>
        /// <param name="index">The index.</param>
        /// <autogeneratedoc />
        public NavItem(string caption, int index)
            => (Caption, Index) = (caption, index);

        /// <summary>
        /// Gets or sets the caption.
        /// </summary>
        /// <value>The caption.</value>
        /// <autogeneratedoc />
        public string Caption { get; set; }
        /// <summary>
        /// Gets or sets the index.
        /// </summary>
        /// <value>The index.</value>
        /// <autogeneratedoc />
        public int Index { get; set; }
        /// <summary>
        /// Gets or sets the badge.
        /// </summary>
        /// <value>The badge.</value>
        /// <autogeneratedoc />
        public string? Badge { get; set; }
        /// <summary>
        /// Gets or sets the type of the badge.
        /// </summary>
        /// <value>The type of the badge.</value>
        /// <autogeneratedoc />
        public string? BadgeType { get; set; }
        /// <summary>
        /// Gets or sets the children.
        /// </summary>
        /// <value>The children.</value>
        /// <autogeneratedoc />
        public IList<NavItem> Children { get; } = new List<NavItem>();
    }

    /// <summary>
    /// Class AdornerBlazorCustomizeNavigationController. This class cannot be inherited.
    /// Implements the <see cref="DevExpress.ExpressApp.WindowController" />
    /// </summary>
    /// <seealso cref="DevExpress.ExpressApp.WindowController" />
    /// <autogeneratedoc />
    [XenialCheckLicence]
    public sealed partial class AdornerBlazorCustomizeNavigationController : WindowController
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdornerBlazorCustomizeNavigationController"/> class.
        /// </summary>
        /// <autogeneratedoc />
        public AdornerBlazorCustomizeNavigationController()
            => TargetWindowType = WindowType.Main;

        /// <summary>
        /// Called when [activated].
        /// </summary>
        protected override void OnActivated()
        {
            base.OnActivated();
            if (Application is BlazorApplication blazorApplication)
            {
                if (Application.Model is IModelApplicationNavigationItems modelApplicationNavigationItems)
                {
                    void CollectNavigationItems(IModelNavigationItem modelNavigationItem, IList<NavItem> navItems)
                    {
                        var navItem = new NavItem(modelNavigationItem.Caption, modelNavigationItem.Index ?? navItems.Count);
                        if (modelNavigationItem is IXenialModelBadgeStaticTextItem badgeStaticTextItem)
                        {
                            navItem.Badge = badgeStaticTextItem.XenialBadgeStaticText;
                            navItem.BadgeType = badgeStaticTextItem.XenialBadgeStaticPaintStyle?.ToString();
                        }

                        navItems.Add(navItem);

                        foreach (var item in modelNavigationItem.Items)
                        {
                            CollectNavigationItems(item, navItem.Children);
                        }
                    }

                    var navItems = new List<NavItem>();

                    foreach (var item in modelApplicationNavigationItems.NavigationItems.Items)
                    {
                        CollectNavigationItems(item, navItems);
                    }

                    if (navItems.Count > 0)
                    {
                        if (blazorApplication.ServiceProvider.GetService(typeof(IJSRuntime)) is IJSRuntime jSRuntime)
                        {
#if NET5_0
                            jSRuntime.InvokeAsync<IJSObjectReference>("import", $"./_content/{GetType().Assembly.GetName().Name}/Xenial.Framework.Badges.Blazor.js").AsTask().ContinueWith(autoImportTask =>
                            {
                                if (autoImportTask.IsCompletedSuccessfully && autoImportTask.Result is IJSObjectReference jsObjectReference)
                                {
                                    jsObjectReference.InvokeVoidAsync("xenialAttachBadges", navItems).AsTask().Await(false);
                                }
                            }, TaskScheduler.Default);
#else
                            jSRuntime.InvokeVoidAsync("xenialAttachBadges", navItems).AsTask().Await(false);
#endif
                        }
                    }
                }

            }
        }

        /// <summary>
        /// Called when [deactivated].
        /// </summary>
        /// <autogeneratedoc />
        protected override void OnDeactivated()
        {
            base.OnDeactivated();
            _ = true;
        }
    }
}
