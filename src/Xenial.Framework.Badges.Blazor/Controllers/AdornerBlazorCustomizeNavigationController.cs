using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Blazor;
using DevExpress.ExpressApp.SystemModule;
using DevExpress.XtraPrinting.Native.Extensions;

using Microsoft.JSInterop;

using Xenial.Framework.Badges.Model;

namespace Xenial.Framework.Badges.Blazor
{
    /// <summary>
    /// Class AdornerBlazorCustomizeNavigationController. This class cannot be inherited.
    /// Implements the <see cref="DevExpress.ExpressApp.WindowController" />
    /// </summary>
    /// <seealso cref="DevExpress.ExpressApp.WindowController" />
    /// <autogeneratedoc />
    [XenialCheckLicence]
    public sealed partial class AdornerBlazorCustomizeNavigationController : WindowController
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdornerBlazorCustomizeNavigationController"/> class.
        /// </summary>
        /// <autogeneratedoc />
        public AdornerBlazorCustomizeNavigationController()
            => TargetWindowType = WindowType.Main;

        /// <summary>
        /// Called when [activated].
        /// </summary>
        protected override void OnActivated()
        {
            base.OnActivated();
            if (Application is BlazorApplication blazorApplication)
            {
                if (Application.Model is IModelApplicationNavigationItems modelApplicationNavigationItems)
                {
                    var staticTextItems = modelApplicationNavigationItems.NavigationItems.AllItems.Where(i => i is IXenialModelBadgeStaticTextItem).Select(i =>
                    {
                        var item = i;
                        var staticBadge = (IXenialModelBadgeStaticTextItem)i;
                        if (item.Parent is IModelNavigationItems parent)
                        {
                            if (parent.Parent is IModelNavigationItem parentNavigationItem)
                            {
                                return (item, staticBadge, parentNavigationItem);
                            }
                        }
                        return (item, staticBadge, null!);
                    }).Where(x =>
                        !string.IsNullOrEmpty(x.staticBadge.XenialBadgeStaticText)
                        && x.parentNavigationItem is not null
                    );

                    var items = staticTextItems.Select(tuple => new
                    {
                        Caption = tuple.item.Caption,
                        BadgeStaticText = tuple.staticBadge.XenialBadgeStaticText,
                        BadgePaintStyle = tuple.staticBadge.XenialBadgeStaticPaintStyle?.ToString(),
                        ParentCaption = tuple.parentNavigationItem.Caption
                    }).ToList();

                    if (items.Count > 0)
                    {
                        if (blazorApplication.ServiceProvider.GetService(typeof(IJSRuntime)) is IJSRuntime jSRuntime)
                        {
#if NET5_0
                            jSRuntime.InvokeAsync<IJSObjectReference>("import", $"./_content/{GetType().Assembly.GetName().Name}/Xenial.Framework.Badges.Blazor.js").AsTask().ContinueWith(autoImportTask =>
                            {
                                if (autoImportTask.IsCompletedSuccessfully && autoImportTask.Result is IJSObjectReference jsObjectReference)
                                {
                                    jsObjectReference.InvokeVoidAsync("xenialAttachBadges", items).AsTask().Await(false);
                                }
                            }, TaskScheduler.Default);
#else
                            jSRuntime.InvokeVoidAsync("xenialAttachBadges").AsTask().Await(false);
#endif
                        }
                    }
                }

            }
        }

        /// <summary>
        /// Called when [deactivated].
        /// </summary>
        /// <autogeneratedoc />
        protected override void OnDeactivated()
        {
            base.OnDeactivated();
            _ = true;
        }
    }
}
