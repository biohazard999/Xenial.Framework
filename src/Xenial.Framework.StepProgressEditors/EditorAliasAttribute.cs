using System;

using DevExpress.ExpressApp.Model;

using Xenial;
using Xenial.Framework.ModelBuilders;
using Xenial.Framework.StepProgressEditors.PubTernal;

namespace DevExpress.Persistent.Base
{
    /// <summary>
    /// Class WebViewUriEditorAttribute.
    /// Implements the <see cref="DevExpress.Persistent.Base.EditorAliasAttribute" />
    /// </summary>
    /// <seealso cref="DevExpress.Persistent.Base.EditorAliasAttribute" />
    /// <autogeneratedoc />
    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, Inherited = true, AllowMultiple = false)]
    [XenialCheckLicence]
    public sealed partial class StepProgressEnumEditorAttribute : EditorAliasAttribute
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="StepProgressEnumEditorAttribute"/>
        /// class.</para>
        /// </summary>

        public StepProgressEnumEditorAttribute() : base(StepProgressEditorAliases.StepProgressEnumPropertyEditor) { }

    }

    /// <summary>
    /// Class StepProgressEditorOptions. This class cannot be inherited.
    /// Implements the <see cref="System.Attribute" />
    /// </summary>
    /// <seealso cref="System.Attribute" />
    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, Inherited = true, AllowMultiple = false)]
    [XenialCheckLicence]
    public sealed partial class StepProgressEditorOptionsAttribute : Attribute
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="StepProgressEditorOptionsAttribute"/>
        /// class.</para>
        /// </summary>

        public StepProgressEditorOptionsAttribute() { }

        /// <summary>   Gets or sets a value indicating whether [show description]. </summary>
        ///
        /// <value> <c>true</c> if [show description]; otherwise, <c>false</c>. </value>

        public bool ShowDescription { get; set; } = true;

        /// <summary>   Gets or sets a value indicating whether [show images]. </summary>
        ///
        /// <value> <c>true</c> if [show images]; otherwise, <c>false</c>. </value>

        public bool ShowImages { get; set; } = true;

        /// <summary>   Gets or sets the orientation. </summary>
        ///
        /// <value> The orientation. </value>

        public StepProgressOrientation Orientation { get; set; } = StepProgressOrientation.Horizontal;

        /// <summary>   Gets or sets a value indicating whether [fill indicators]. </summary>
        ///
        /// <value> <c>true</c> if [fill indicators]; otherwise, <c>false</c>. </value>

        public bool FillIndicators { get; set; }

        /// <summary>   Gets or sets a value indicating whether [inverse progress direction]. </summary>
        ///
        /// <value> <c>true</c> if [inverse progress direction]; otherwise, <c>false</c>. </value>

        public bool InverseProgressDirection { get; set; }

        /// <summary>   Gets or sets a value indicating whether [draw connectors]. </summary>
        ///
        /// <value> <c>true</c> if [draw connectors]; otherwise, <c>false</c>. </value>

        public bool DrawConnectors { get; set; } = true;
    }

    /// <summary>   Enum StepProgressOrientation. </summary>
    public enum StepProgressOrientation
    {
        /// <summary>
        /// The horizontal
        /// </summary>
        /// <autogeneratedoc />
        Horizontal,

        /// <summary>
        /// The vertical
        /// </summary>
        /// <autogeneratedoc />
        Vertical
    }
}
