#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CA1000 // Don't declare static members in generic types
#pragma warning disable IDE1006 // Naming Styles

using System;
using System.ComponentModel;
using System.Linq.Expressions;
using DevExpress.Data;
using DevExpress.ExpressApp.Editors;
using DevExpress.ExpressApp.Model;
using DevExpress.Persistent.Base;

using Xenial.Data;
using Xenial.Framework.Utils.Slugger;
using Xenial.Utils;

namespace Xenial.Framework.Layouts.ColumnItems;

/// <summary>
/// 
/// </summary>
[XenialCheckLicense]
public partial record Column<TModelClass>(string PropertyName) : Column(PropertyName)
    where TModelClass : class
{
    /// <summary>   Gets the expression helper. </summary>
    ///
    /// <value> The expression helper. </value>

    protected static ExpressionHelper<TModelClass> ExpressionHelper { get; } = Xenial.Utils.ExpressionHelper.Create<TModelClass>();

    /// <summary>   Creates a new Column&lt;TModelClass&gt; </summary>
    ///
    /// <typeparam name="TProperty">    Type of the property. </typeparam>
    /// <param name="expression">   The expression. </param>
    ///
    /// <returns>   A Column&lt;TModelClass&gt; </returns>

    public static Column<TModelClass> Create<TProperty>(Expression<Func<TModelClass, TProperty>> expression)
        => new(ExpressionHelper.Property(expression));
}

/// <summary>   (Immutable) a column. </summary>
[XenialCheckLicense]
public partial record Column
{
    private static SlugifierConfig CreateDefaultSlugifierConfig() => new()
    {
        CollapseWhiteSpace = true,
        CollapseDashes = true,
        ForceLowerCase = false,
        TrimWhitespace = true,
        StringReplacements =
            {
                ["."] = "-",
                [" "] = "-",
                ["/"] = "-",
                ["\\"] = "-",
            }
    };

    private static Slugifier defaultSlugifier = new(CreateDefaultSlugifierConfig());

    /// <summary>
    /// Gets or sets the default slugifier.
    /// </summary>
    /// <value>The default slugifier.</value>
    /// <exception cref="ArgumentNullException">defaultSlugifier</exception>
    /// <autogeneratedoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal Slugifier Slugifier { get; init; } = DefaultSlugifier ?? new(CreateDefaultSlugifierConfig());

    /// <summary>
    /// Gets or sets the default slugifier.
    /// </summary>
    /// <value>The default slugifier.</value>
    /// <exception cref="ArgumentNullException">defaultSlugifier</exception>
    /// <autogeneratedoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public static Slugifier DefaultSlugifier
    {
        get => defaultSlugifier;
        set => defaultSlugifier = value ?? throw new ArgumentNullException(nameof(DefaultSlugifier));
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Column"/> class.
    /// </summary>
    /// <param name="propertyName">Name of the property.</param>
    /// <autogeneratedoc />
    public Column(string propertyName)
        => (PropertyName, Id) = (propertyName, Slugifier.GenerateSlug(propertyName));

    /// <summary>
    /// Gets or sets the identifier.
    /// </summary>
    /// <value>The identifier.</value>
    public string Id { get; set; }

    /// <summary>
    /// Gets or sets the name of the property.
    /// </summary>
    /// <value>The name of the property.</value>
    public string PropertyName { get; set; }

    /// <summary>
    /// Gets or sets the index.
    /// </summary>
    /// <value>The index.</value>
    public int? Index { get; set; }

    /// <summary>
    /// Gets or sets the type of the property editor.
    /// </summary>
    /// <value>The type of the property editor.</value>
    public Type? PropertyEditorType { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether [allow edit].
    /// </summary>
    /// <value><c>null</c> if [allow edit] contains no value, <c>true</c> if [allow edit]; otherwise, <c>false</c>.</value>
    public bool? AllowEdit { get; set; }

    /// <summary>
    /// Gets or sets the index of the group.
    /// </summary>
    /// <value>The index of the group.</value>
    public int? GroupIndex { get; set; }

    /// <summary>
    /// Gets or sets the group interval.
    /// </summary>
    /// <value>The group interval.</value>
    public GroupInterval? GroupInterval { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether [immediate post data].
    /// </summary>
    /// <value><c>null</c> if [immediate post data] contains no value, <c>true</c> if [immediate post data]; otherwise, <c>false</c>.</value>
    public bool? ImmediatePostData { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether this instance is password.
    /// </summary>
    /// <value><c>null</c> if [is password] contains no value, <c>true</c> if [is password]; otherwise, <c>false</c>.</value>
    public bool? IsPassword { get; set; }

    /// <summary>
    /// Gets or sets the lookup editor mode.
    /// </summary>
    /// <value>The lookup editor mode.</value>
    public LookupEditorMode? LookupEditorMode { get; set; }

    /// <summary>
    /// Gets or sets the index of the sort.
    /// </summary>
    /// <value>The index of the sort.</value>
    public int? SortIndex { get; set; }

    /// <summary>
    /// Gets or sets the sort order.
    /// </summary>
    /// <value>The sort order.</value>
    public ColumnSortOrder? SortOrder { get; set; }

    /// <summary>
    /// Gets or sets the data source criteria.
    /// </summary>
    /// <value>The data source criteria.</value>
    public string? DataSourceCriteria { get; set; }

    /// <summary>
    /// Gets or sets the data source criteria property.
    /// </summary>
    /// <value>The data source criteria property.</value>
    public string? DataSourceCriteriaProperty { get; set; }

    /// <summary>
    /// Gets or sets the data source property.
    /// </summary>
    /// <value>The data source property.</value>
    public string? DataSourceProperty { get; set; }

    /// <summary>
    /// Gets or sets the data source property is null criteria.
    /// </summary>
    /// <value>The data source property is null criteria.</value>
    public string? DataSourcePropertyIsNullCriteria { get; set; }

    /// <summary>
    /// Gets or sets the data source property is null mode.
    /// </summary>
    /// <value>The data source property is null mode.</value>
    public DataSourcePropertyIsNullMode? DataSourcePropertyIsNullMode { get; set; }

    /// <summary>
    /// Gets or sets the lookup property.
    /// </summary>
    /// <value>The lookup property.</value>
    public string? LookupProperty { get; set; }

    /// <summary>
    /// Gets or sets the predefined values.
    /// </summary>
    /// <value>The predefined values.</value>
    public string? PredefinedValues { get; set; }

    /// <summary>
    /// Gets or sets the display format.
    /// </summary>
    /// <value>The display format.</value>
    public string? DisplayFormat { get; set; }

    /// <summary>
    /// Gets or sets the type of the edit mask.
    /// </summary>
    /// <value>The type of the edit mask.</value>
    public EditMaskType? EditMaskType { get; set; }

    /// <summary>
    /// Gets or sets the edit mask.
    /// </summary>
    /// <value>The edit mask.</value>
    public string? EditMask { get; set; }

    /// <summary>
    /// Gets or sets the maximum length.
    /// </summary>
    /// <value>The maximum length.</value>
    public int? MaxLength { get; set; }

    /// <summary>
    /// Gets or sets the row count.
    /// </summary>
    /// <value>The row count.</value>
    public int? RowCount { get; set; }

    /// <summary>
    /// Gets or sets the width.
    /// </summary>
    /// <value>The width.</value>
    public int? Width { get; set; }

    /// <summary>
    /// Gets or sets the caption.
    /// </summary>
    /// <value>The caption.</value>
    public string? Caption { get; set; }

    /// <summary>
    /// Gets or sets the tooltip.
    /// </summary>
    /// <value>The tooltip.</value>
    public string? ToolTip { get; set; }

    /// <summary>
    /// Gets or sets the image size mode.
    /// </summary>
    /// <value>The image size mode.</value>
    /// <autogeneratedoc />
    public ImageSizeMode? ImageSizeMode { get; set; }

    /// <summary>
    /// Gets or sets the image for false.
    /// </summary>
    /// <value>The image for false.</value>
    /// <autogeneratedoc />
    public string? ImageForFalse { get; set; }

    /// <summary>
    /// Gets or sets the image for true.
    /// </summary>
    /// <value>The image for true.</value>
    /// <autogeneratedoc />
    public string? ImageForTrue { get; set; }

    /// <summary>
    /// Gets or sets the caption for false.
    /// </summary>
    /// <value>The caption for false.</value>
    /// <autogeneratedoc />
    public string? CaptionForFalse { get; set; }

    /// <summary>
    /// Gets or sets the caption for true.
    /// </summary>
    /// <value>The caption for true.</value>
    /// <autogeneratedoc />
    public string? CaptionForTrue { get; set; }

    /// <summary>
    /// Gets or sets the allow clear.
    /// </summary>
    /// <value>The allow clear.</value>
    /// <autogeneratedoc />
    public bool? AllowClear { get; set; }

    /// <summary>
    /// Gets or sets the null text.
    /// </summary>
    /// <value>The null text.</value>
    /// <autogeneratedoc />
    public string? NullText { get; set; }

    /// <summary>
    /// Gets or sets the height of the image editor custom.
    /// </summary>
    /// <value>The height of the image editor custom.</value>
    /// <autogeneratedoc />
    public int? ImageEditorCustomHeight { get; set; }

    /// <summary>
    /// Gets or sets the image editor mode.
    /// </summary>
    /// <value>The image editor mode.</value>
    /// <autogeneratedoc />
    public ImageEditorMode? ImageEditorMode { get; set; }

    /// <summary>
    /// Gets or sets the width of the image editor fixed.
    /// </summary>
    /// <value>The width of the image editor fixed.</value>
    /// <autogeneratedoc />
    public int? ImageEditorFixedWidth { get; set; }

    /// <summary>
    /// Gets or sets the height of the image editor fixed.
    /// </summary>
    /// <value>The height of the image editor fixed.</value>
    /// <autogeneratedoc />
    public int? ImageEditorFixedHeight { get; set; }
}
