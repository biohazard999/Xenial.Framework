using System;
using System.ComponentModel;

using Xenial.Framework.Utils.Slugger;

namespace Xenial.Framework.Layouts.Items.Base
{
    /// <summary>
    /// 
    /// </summary>
    public abstract record LayoutItemNode
    {
        private static Slugifier defaultSlugifier = new(new SlugifierConfig
        {
            CollapseWhiteSpace = true,
            CollapseDashes = true,
            StringReplacements =
            {
                ["."] = "-",
                [" "] = "-"
            }
        });

        /// <summary>
        /// Gets or sets the default slugifier.
        /// </summary>
        /// <value>The default slugifier.</value>
        /// <exception cref="ArgumentNullException">defaultSlugifier</exception>
        /// <autogeneratedoc />
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public static Slugifier DefaultSlugifier
        {
            get => defaultSlugifier;
            set => defaultSlugifier = value ?? throw new ArgumentNullException(nameof(DefaultSlugifier));
        }

        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        /// <value>The identifier.</value>
        /// <autogeneratedoc />
        public virtual string? Id { get; set; }

        /// <summary>
        /// Gets or sets the index.
        /// </summary>
        /// <value>The index.</value>
        /// <autogeneratedoc />
        public virtual int? Index { get; set; }

        /// <summary>
        /// Gets or sets the parent.
        /// </summary>
        /// <value>The parent.</value>
        /// <autogeneratedoc />
        internal LayoutItemNode? ParentItem { get; set; }

        /// <summary>
        /// Gets or sets the parent.
        /// </summary>
        /// <value>The parent.</value>
        public LayoutItemNode? Parent
        {
            get => ParentItem;
            set
            {
                if (ParentItem is LayoutItem oldParentItem)
                {
                    oldParentItem.Remove(this);
                }

                ParentItem = value;

                if (ParentItem is LayoutItem newParentItem)
                {
                    newParentItem.Add(this);
                }
            }
        }

        /// <summary>
        /// Gets the is root.
        /// </summary>
        /// <value>The is root.</value>
        /// <autogeneratedoc />
        public bool IsRoot => ParentItem is null;

        /// <summary>
        /// Gets the is leaf.
        /// </summary>
        /// <value>The is leaf.</value>
        /// <autogeneratedoc />
        public virtual bool IsLeaf => true;

        /// <summary>
        /// Gets the level.
        /// </summary>
        /// <value>The level.</value>
        /// <autogeneratedoc />
        public virtual int Level => Parent is null ? 0 : Parent.Level + 1;
    }
}
