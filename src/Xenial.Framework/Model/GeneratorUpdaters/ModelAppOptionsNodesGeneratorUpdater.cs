using System;

using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp.Model.Core;
using DevExpress.ExpressApp.Model.NodeGenerators;

namespace Xenial.Framework.Model.GeneratorUpdaters
{
    /// <summary>
    /// Class ModelAppOptionsNodesGeneratorUpdater. Implements the
    /// <see cref="ModelNodesGeneratorUpdater{ModelOptionsNodesGenerator}"/>
    /// </summary>
    ///
    /// <seealso cref="ModelNodesGeneratorUpdater{ModelOptionsNodesGenerator}"/>

    [XenialCheckLicense]
    public sealed partial class ModelAppOptionsNodesGeneratorUpdater : ModelNodesGeneratorUpdater<ModelOptionsNodesGenerator>
    {
        private AppOptions Options { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelAppOptionsNodesGeneratorUpdater"/> class.
        /// </summary>
        ///
        /// <param name="options">  The options. </param>

        public ModelAppOptionsNodesGeneratorUpdater(AppOptions options)
            => Options = options ?? throw new ArgumentNullException(nameof(options));

        /// <summary>
        /// Updates the Application Model node content generated by the Nodes Generator.
        /// </summary>
        ///
        /// <param name="node"> A ModelNode Application Model node to be updated. </param>

        public override void UpdateNode(ModelNode node)
        {
            if (node is IModelOptions options && options.Application is not null)
            {
                if (Options.AboutInfoString is not null)
                {
                    options.Application.AboutInfoString = Options.AboutInfoString;
                }

                if (Options.Company is not null)
                {
                    options.Application.Company = Options.Company;
                }

                if (Options.Copyright is not null)
                {
                    options.Application.Copyright = Options.Copyright;
                }

                if (Options.Description is not null)
                {
                    options.Application.Description = Options.Description;
                }

                if (Options.Logo is not null)
                {
                    options.Application.Logo = Options.Logo;
                }

                if (Options.PreferredLanguage is not null)
                {
                    options.Application.PreferredLanguage = Options.PreferredLanguage;
                }

                if (Options.ProtectedContentText is not null)
                {
                    options.Application.ProtectedContentText = Options.ProtectedContentText;
                }

                if (Options.Title is not null)
                {
                    options.Application.Title = Options.Title;
                }

                if (Options.VersionFormat is not null)
                {
                    options.Application.VersionFormat = Options.VersionFormat;
                }
            }
        }
    }
}
