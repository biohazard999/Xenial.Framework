using System;

using DevExpress.ExpressApp.DC;
using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp.Model.Core;
using DevExpress.ExpressApp.SystemModule;

using Xenial.Framework.Base;

namespace Xenial.Framework.Model.GeneratorUpdaters
{
    /// <summary>
    /// Class SingletonNavigationItemNodesUpdater. Implements the
    /// <see cref="DevExpress.ExpressApp.Model.ModelNodesGeneratorUpdater{DevExpress.ExpressApp.SystemModule.NavigationItemNodeGenerator}" />
    /// </summary>
    ///
    /// <seealso cref="ModelNodesGeneratorUpdater{NavigationItemNodeGenerator}"/>
    /// <seealso cref="DevExpress.ExpressApp.Model.ModelNodesGeneratorUpdater{DevExpress.ExpressApp.SystemModule.NavigationItemNodeGenerator}"> <autogeneratedoc /></seealso>

    [XenialCheckLicence]
    public sealed partial class SingletonNavigationItemNodesUpdater : ModelNodesGeneratorUpdater<NavigationItemNodeGenerator>
    {
        /// <summary>
        /// Updates the Application Model node content generated by the Nodes Generator, specified by the
        /// <see cref="T:DevExpress.ExpressApp.Model.ModelNodesGeneratorUpdater`1" /> class' type
        /// parameter.
        /// </summary>
        ///
        /// <param name="node"> A ModelNode Application Model node to be updated. </param>

        public override void UpdateNode(ModelNode node)
        {
            if (node is IModelRootNavigationItems rootNavigationItems)
            {
                foreach (var item in rootNavigationItems.Items)
                {
                    UpdateNode(item);
                }
            }

            static void UpdateNode(IModelNavigationItem item)
            {
                if (item.View is IModelObjectView modelObjectView && item.View is IModelListView)
                {
                    if (modelObjectView.ModelClass.TypeInfo.IsAttributeDefined<SingletonAttribute>(false))
                    {
                        item.View = modelObjectView.ModelClass.DefaultDetailView;
                    }
                }
                foreach (var nestedNode in item.Items)
                {
                    UpdateNode(nestedNode);
                }
            }
        }
    }
}
