using System;

using Xenial.Framework.Layouts;
using Xenial.Framework.Layouts.Items.Base;

namespace Xenial.Framework.ModelBuilders
{
    public static partial class ModelBuilderExtensions
    {
        /// <summary>
        /// Withes the list view layout.
        /// </summary>
        /// <typeparam name="TClassType">The type of the t class type.</typeparam>
        /// <param name="modelBuilder">The model builder.</param>
        /// <param name="columnsFunctor">The columns functor.</param>
        /// <returns>IModelBuilder&lt;TClassType&gt;.</returns>
        /// <autogeneratedoc />
        public static IModelBuilder<TClassType> WithListViewColumns<TClassType>(
            this IModelBuilder<TClassType> modelBuilder,
            BuildColumnsFunctor columnsFunctor
        )
        {
            _ = modelBuilder ?? throw new ArgumentNullException(nameof(modelBuilder));
            _ = columnsFunctor ?? throw new ArgumentNullException(nameof(columnsFunctor));
            return modelBuilder.WithAttribute(new ListViewColumnsBuilderAttribute(columnsFunctor));
        }

        ///// <summary>
        ///// Withes the detail view layout.
        ///// </summary>
        ///// <typeparam name="TClassType">The type of the t class type.</typeparam>
        ///// <param name="modelBuilder">The model builder.</param>
        ///// <param name="layoutBuilder">The layout builder.</param>
        ///// <returns>IModelBuilder&lt;TClassType&gt;.</returns>
        ///// <exception cref="ArgumentNullException">modelBuilder</exception>
        ///// <exception cref="ArgumentNullException">layoutBuilder</exception>
        ///// <exception cref="ArgumentNullException">modelBuilder</exception>
        //public static IModelBuilder<TClassType> WithListViewColumns<TClassType>(
        //  this IModelBuilder<TClassType> modelBuilder,
        //  Func<LayoutBuilder<TClassType>, Layout> layoutBuilder
        //)
        //    where TClassType : class
        //{
        //    _ = modelBuilder ?? throw new ArgumentNullException(nameof(modelBuilder));
        //    _ = layoutBuilder ?? throw new ArgumentNullException(nameof(layoutBuilder));

        //    var layout = layoutBuilder(new LayoutBuilder<TClassType>());

        //    return modelBuilder.WithAttribute(new DetailViewLayoutBuilderAttribute(() => layout));
        //}
    }
}
