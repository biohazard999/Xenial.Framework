using System;
using System.Linq;

using DevExpress.ExpressApp.Model;

using Xenial.Framework.Layouts.Items.Base;

namespace Xenial.Framework.Model.GeneratorUpdaters;

public partial class ModelDetailViewLayoutNodesGeneratorUpdater
{
    internal class LayoutViewItemBuilder
         : ModelViewLayoutElementFactory<IModelLayoutViewItem, LayoutViewItem>
    {
        private static IModelViewItems? FindViewItems(IModelNode? modelNode)
        {
            if (modelNode is IModelViews || modelNode is null) //Stop here, we don't need to lookup any further
            {
                return null;
            }

            if (modelNode is IModelCompositeView modelCompositeView)
            {
                return modelCompositeView.Items;
            }

            return FindViewItems(modelNode.Parent);
        }

        protected override string? CreateAutoGeneratedId(LayoutViewItem layoutItemNode, int index)
            => $"ViewItem-{index}";

        /// <summary>   Creates view layout element. </summary>
        ///
        /// <param name="parentNode">           The parent node. </param>
        /// <param name="layoutViewItemNode">   The layout view item node. </param>
        ///
        /// <returns>   The new view layout element. </returns>

        protected override IModelLayoutViewItem? CreateViewLayoutElement(IModelNode parentNode, LayoutViewItem layoutViewItemNode)
        {
            var modelLayoutViewItem = parentNode.AddNode<IModelLayoutViewItem>(layoutViewItemNode.Id);

            var viewItems = FindViewItems(parentNode);
            if (viewItems is not null)
            {
                if (layoutViewItemNode.IsDuplicate)
                {
                    //TODO: Better duplicated node handler
                    var viewItem = viewItems.OfType<IModelViewItem>().FirstOrDefault(m => m.Id == layoutViewItemNode.Id);
                    modelLayoutViewItem.ViewItem = viewItem;
                }
                else
                {
                    var viewItem = viewItems.OfType<IModelViewItem>().FirstOrDefault(m => m.Id == layoutViewItemNode.ViewItemId);
                    modelLayoutViewItem.ViewItem = viewItem;
                }
            }

            return modelLayoutViewItem;

        }
    }
}
