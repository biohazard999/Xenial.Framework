using System;
using System.Linq;

using DevExpress.ExpressApp.DC;
using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp.Model.Core;
using DevExpress.ExpressApp.Model.NodeGenerators;
using DevExpress.ExpressApp.SystemModule;

using Xenial.Framework.Base;

#pragma warning disable CA1309 //Use ordinal string comparison -> By Design
#pragma warning disable CA1307 //Use ordinal string comparison -> By Design

namespace Xenial.Framework.Model.GeneratorUpdaters;

/// <summary>
/// Class ModelViewsDeclareViewsUpdater. This class cannot be inherited. Implements the
/// <see cref="ModelNodesGeneratorUpdater{ModelViewsNodesGenerator}" />
/// </summary>
///
/// <seealso cref="ModelNodesGeneratorUpdater{ModelViewsNodesGenerator}">
/// <autogeneratedoc />
/// </seealso>

[XenialCheckLicense]
public sealed partial class ModelViewsDeclareViewsUpdater : ModelNodesGeneratorUpdater<ModelViewsNodesGenerator>
{
    /// <summary>
    /// Updates the Application Model node content generated by the Nodes Generator, specified by the
    /// <see cref="T:DevExpress.ExpressApp.Model.ModelNodesGeneratorUpdater`1" /> class' type
    /// parameter.
    /// </summary>
    ///
    /// <param name="node"> A ModelNode Application Model node to be updated. </param>

    public override void UpdateNode(ModelNode node)
    {
        if (node is IModelViews views)
        {
            //Make sure we generate navigation item nodes before we remove the views
            //Otherwise we have no idea what View/ModelClass the navigation item belonged to
            if (views.Application is IModelApplicationNavigationItems modelApplicationNavigationItems)
            {
                _ = modelApplicationNavigationItems.NavigationItems.Items;
            }

            foreach (var newViewId in views.Application.BOModel.Select(m => new
            {
                Model = m,
                Attributes = m.TypeInfo.FindAttributes<DeclareViewAttribute>().ToArray()
            }).Where(m => m.Attributes.Length > 0))
            {
                foreach (var attribute in newViewId.Attributes)
                {
                    if (attribute.ViewType == DevExpress.ExpressApp.ViewType.DetailView)
                    {
                        var detailView = views.AddNode<IModelDetailView>(attribute.ViewId);
                        detailView.ModelClass = newViewId.Model;
                    }
                    if (attribute.ViewType == DevExpress.ExpressApp.ViewType.ListView)
                    {
                        var listView = views.AddNode<IModelListView>(attribute.ViewId);
                        listView.ModelClass = newViewId.Model;
                    }
                    if (attribute.ViewType == DevExpress.ExpressApp.ViewType.DashboardView)
                    {
                        views.AddNode<IModelDashboardView>(attribute.ViewId);
                    }
                }
            }
        }
    }
}
