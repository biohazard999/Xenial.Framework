using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp.Model.Core;
using DevExpress.ExpressApp.Model.NodeGenerators;

using Xenial.Framework.Layouts;
using Xenial.Framework.Layouts.Items;
using Xenial.Framework.Layouts.Items.Base;

namespace Xenial.Framework.Model.GeneratorUpdaters
{
    /// <summary>
    /// Class ModelDetailViewLayoutNodesGeneratorUpdater.
    /// Implements the <see cref="DevExpress.ExpressApp.Model.ModelNodesGeneratorUpdater{DevExpress.ExpressApp.Model.NodeGenerators.ModelDetailViewLayoutNodesGenerator}" />
    /// </summary>
    /// <seealso cref="DevExpress.ExpressApp.Model.ModelNodesGeneratorUpdater{DevExpress.ExpressApp.Model.NodeGenerators.ModelDetailViewLayoutNodesGenerator}" />
    /// <autogeneratedoc />
    public class ModelDetailViewLayoutNodesGeneratorUpdater : ModelNodesGeneratorUpdater<ModelDetailViewLayoutNodesGenerator>
    {
        /// <summary>
        /// Updates the Application Model node content generated by the Nodes Generator, specified by the <see cref="T:DevExpress.ExpressApp.Model.ModelNodesGeneratorUpdater`1" /> class' type parameter.
        /// </summary>
        /// <param name="modelNode">A ModelNode Application Model node to be updated.</param>
        /// <exception cref="NotImplementedException"></exception>
        /// <autogeneratedoc />
#pragma warning disable CA1725 //match identitfier of base class -> would conflict with nodes
        public override void UpdateNode(ModelNode modelNode)
#pragma warning restore CA1725 //match identitfier of base class -> would conflict with nodes
        {
            if (modelNode is IModelViewLayout modelViewLayout)
            {
                if (modelViewLayout.Parent is IModelDetailView modelDetailView)
                {
                    //TODO: check IModelObjectGeneratedView

                    if (modelDetailView.Equals(modelDetailView.ModelClass.DefaultDetailView))
                    {
                        //TODO: multiple views and attributes
                        var attribute = modelDetailView.ModelClass.TypeInfo.FindAttribute<DetailViewLayoutBuilderAttribute>();
                        //TODO: Factory
                        if (attribute.BuildLayoutDelegate is not null)
                        {
                            var builder = attribute.BuildLayoutDelegate;
                            var layout = builder.Invoke()
                                ?? throw new InvalidOperationException($"LayoutBuilder on Type '{modelDetailView.ModelClass.TypeInfo.Type}' for View '{modelDetailView.Id}' must return an object of Type '{typeof(Layout)}'");

                            modelViewLayout.ClearNodes();

                            var modelMainNode = modelViewLayout
                                .AddNode<IModelLayoutGroup>(ModelDetailViewLayoutNodesGenerator.MainLayoutGroupName)
                                ?? throw new InvalidOperationException($"Cannot generate 'Main' node on Type '{modelDetailView.ModelClass.TypeInfo.Type}' for View '{modelDetailView.Id}'");

                            foreach (var layoutViewItemNode in VisitNodes<LayoutViewItem>(layout))
                            {
                                var modelLayoutViewItem = modelMainNode.AddNode<IModelLayoutViewItem>(layoutViewItemNode.Id);
                                modelLayoutViewItem.ViewItem = modelDetailView.Items.OfType<IModelViewItem>().FirstOrDefault(m => m.Id == layoutViewItemNode.ViewItemId);

                                if (modelLayoutViewItem is IModelLayoutElementWithCaption modelLayoutElementWithCaption)
                                {
                                    modelLayoutElementWithCaption.Caption =
                                        string.IsNullOrEmpty(layoutViewItemNode.Caption)
                                        ? modelLayoutElementWithCaption.Caption
                                        : layoutViewItemNode.Caption;
                                }
                                else if (modelLayoutViewItem.ViewItem is IModelLayoutElementWithCaption modelLayoutElementWithCaption2)
                                {
                                    modelLayoutElementWithCaption2.Caption =
                                        string.IsNullOrEmpty(layoutViewItemNode.Caption)
                                        ? modelLayoutElementWithCaption2.Caption
                                        : layoutViewItemNode.Caption;
                                }
                                else if (modelLayoutViewItem.ViewItem is not null)
                                {
                                    modelLayoutViewItem.ViewItem.Caption =
                                        string.IsNullOrEmpty(layoutViewItemNode.Caption)
                                        ? modelLayoutViewItem.ViewItem.Caption
                                        : layoutViewItemNode.Caption;
                                }
                            }
                        }
                    }
                    else
                    {

                    }
                }
            }

            static IEnumerable<TItem> VisitNodes<TItem>(LayoutItemNode node)
                where TItem : LayoutItemNode
            {
                if (node is TItem targetNode)
                {
                    yield return targetNode;
                }

                if (node is IEnumerable<LayoutItemNode> items)
                {
                    foreach (var item in items)
                    {
                        foreach (var nestedItem in VisitNodes<TItem>(item))
                        {
                            yield return nestedItem;
                        }
                    }
                }
            }
        }
    }
}
