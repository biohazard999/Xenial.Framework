using System;
using System.Collections.Generic;
using System.Linq;

using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp.Model.Core;
using DevExpress.ExpressApp.Model.NodeGenerators;

using Xenial.Framework.Layouts;
using Xenial.Framework.Layouts.Items;
using Xenial.Framework.Layouts.Items.Base;
using Xenial.Framework.Layouts.Items.LeafNodes;

using static Xenial.Framework.Model.GeneratorUpdaters.ModelDetailViewLayoutNodesGeneratorUpdaterMappers;

namespace Xenial.Framework.Model.GeneratorUpdaters
{
    /// <summary>
    /// Class ModelDetailViewLayoutNodesGeneratorUpdater.
    /// Implements the <see cref="DevExpress.ExpressApp.Model.ModelNodesGeneratorUpdater{DevExpress.ExpressApp.Model.NodeGenerators.ModelDetailViewLayoutNodesGenerator}" />
    /// </summary>
    /// <seealso cref="DevExpress.ExpressApp.Model.ModelNodesGeneratorUpdater{DevExpress.ExpressApp.Model.NodeGenerators.ModelDetailViewLayoutNodesGenerator}" />
    /// <autogeneratedoc />
    [XenialCheckLicence]
    public partial class ModelDetailViewLayoutNodesGeneratorUpdater : ModelNodesGeneratorUpdater<ModelDetailViewLayoutNodesGenerator>
    {
        private readonly NodeBuilderFactory nodeBuilderFactory
            = new NodeBuilderFactory()
                .Register<LayoutGroupItem, LayoutGroupItemBuilder>(() => new LayoutGroupItemBuilder())
            ;

        /// <summary>
        /// Updates the Application Model node content generated by the Nodes Generator, specified by the <see cref="T:DevExpress.ExpressApp.Model.ModelNodesGeneratorUpdater`1" /> class' type parameter.
        /// </summary>
        /// <param name="modelNode">A ModelNode Application Model node to be updated.</param>
        /// <autogeneratedoc />
#pragma warning disable CA1725 //match identitfier of base class -> would conflict with nodes
        public override void UpdateNode(ModelNode modelNode)
#pragma warning restore CA1725 //match identitfier of base class -> would conflict with nodes
        {
            _ = nodeBuilderFactory ?? throw new InvalidOperationException();

            if (modelNode is IModelViewLayout modelViewLayout)
            {
                if (modelViewLayout.Parent is IModelDetailView modelDetailView)
                {
                    //TODO: check IModelObjectGeneratedView

                    if (modelDetailView.Equals(modelDetailView.ModelClass.DefaultDetailView))
                    {
                        //TODO: multiple views and attributes
                        var attribute = modelDetailView.ModelClass.TypeInfo.FindAttribute<DetailViewLayoutBuilderAttribute>();
                        //TODO: Factory
                        if (attribute.BuildLayoutDelegate is not null)
                        {
                            var builder = attribute.BuildLayoutDelegate;
                            var layout = builder.Invoke()
                                ?? throw new InvalidOperationException($"LayoutBuilder on Type '{modelDetailView.ModelClass.TypeInfo.Type}' for View '{modelDetailView.Id}' must return an object of Type '{typeof(Layout)}'");

                            modelViewLayout.ClearNodes();

                            var modelMainNode = modelViewLayout
                                .AddNode<IModelLayoutGroup>(ModelDetailViewLayoutNodesGenerator.MainLayoutGroupName)
                                ?? throw new InvalidOperationException($"Cannot generate 'Main' node on Type '{modelDetailView.ModelClass.TypeInfo.Type}' for View '{modelDetailView.Id}'");

                            foreach (var groupItemNode in VisitNodes<LayoutGroupItem>(layout))
                            {
                                nodeBuilderFactory.CreateViewLayoutElement(modelMainNode, groupItemNode);
                            }

                            foreach (var tabGroupItemNode in VisitNodes<LayoutTabGroupItem>(layout))
                            {
                                var modelLayoutViewItem = modelMainNode.AddNode<IModelLayoutGroup>(tabGroupItemNode.Id);

                                if (modelLayoutViewItem is IModelNode genericModelNode)
                                {
                                    MapModelNode(genericModelNode, tabGroupItemNode);
                                }

                                if (modelLayoutViewItem is IModelViewLayoutElement modelViewLayoutElement)
                                {
                                    MapModelViewLayoutElement(modelViewLayoutElement, tabGroupItemNode);
                                }

                                if (modelLayoutViewItem is IModelLayoutElementWithCaptionOptions modelLayoutElementWithCaptionOptions)
                                {
                                    MapLayoutElementWithCaptionOptions(modelLayoutElementWithCaptionOptions, tabGroupItemNode);
                                }

                                if (modelLayoutViewItem is IModelLayoutElementWithCaption modelLayoutElementWithCaption)
                                {
                                    MapCaption(modelLayoutElementWithCaption, tabGroupItemNode);
                                }

                                if (modelLayoutViewItem is ISupportControlAlignment modelSupportControlAlignment)
                                {
                                    MapSupportControlAlignment(modelSupportControlAlignment, tabGroupItemNode);
                                }

                                if (modelLayoutViewItem is IModelToolTip modelToolTip)
                                {
                                    MapModelToolTip(modelToolTip, tabGroupItemNode);
                                }

                                if (modelLayoutViewItem is IModelToolTipOptions modelToolTipOptions)
                                {
                                    MapModelToolTipOptions(modelToolTipOptions, tabGroupItemNode);
                                }

                                MapLayoutGroup(modelLayoutViewItem, tabGroupItemNode);

                                if (tabGroupItemNode.LayoutGroupOptions is not null)
                                {
                                    tabGroupItemNode.LayoutGroupOptions(modelLayoutViewItem);
                                }
                            }

                            foreach (var tabbedGroupItemNode in VisitNodes<LayoutTabbedGroupItem>(layout))
                            {
                                var modelTabbedGroup = modelMainNode.AddNode<IModelTabbedGroup>(tabbedGroupItemNode.Id);

                                if (modelTabbedGroup is IModelNode genericModelNode)
                                {
                                    MapModelNode(genericModelNode, tabbedGroupItemNode);
                                }

                                if (modelTabbedGroup is IModelViewLayoutElement modelViewLayoutElement)
                                {
                                    MapModelViewLayoutElement(modelViewLayoutElement, tabbedGroupItemNode);
                                }

                                if (modelTabbedGroup is IModelLayoutElementWithCaptionOptions modelLayoutElementWithCaptionOptions)
                                {
                                    MapLayoutElementWithCaptionOptions(modelLayoutElementWithCaptionOptions, tabbedGroupItemNode);
                                }

                                if (modelTabbedGroup is IModelLayoutElementWithCaption modelLayoutElementWithCaption)
                                {
                                    MapCaption(modelLayoutElementWithCaption, tabbedGroupItemNode);
                                }

                                MapTabbedLayoutGroup(modelTabbedGroup, tabbedGroupItemNode);

                                if (tabbedGroupItemNode.TabbedGroupOptions is not null)
                                {
                                    tabbedGroupItemNode.TabbedGroupOptions(modelTabbedGroup);
                                }
                            }

                            foreach (var emptySpaceItemNode in VisitNodes<LayoutEmptySpaceItem>(layout))
                            {
                                var modelLayoutViewItem = modelMainNode.AddNode<IModelLayoutViewItem>(emptySpaceItemNode.Id);
                                if (modelLayoutViewItem is IModelNode genericModelNode)
                                {
                                    MapModelNode(genericModelNode, emptySpaceItemNode);
                                }

                                if (modelLayoutViewItem is IModelLayoutItem modelLayoutItem)
                                {
                                    MapModelLayoutItem(modelLayoutItem, emptySpaceItemNode);
                                }

                                if (modelLayoutViewItem is IModelViewLayoutElement modelViewLayoutElement)
                                {
                                    MapModelViewLayoutElement(modelViewLayoutElement, emptySpaceItemNode);
                                }

                                if (modelLayoutViewItem is ISupportControlAlignment modelSupportControlAlignment)
                                {
                                    MapSupportControlAlignment(modelSupportControlAlignment, emptySpaceItemNode);
                                }
                            }

                            foreach (var layoutViewItemNode in VisitNodes<LayoutViewItem>(layout))
                            {
                                var modelLayoutViewItem = modelMainNode.AddNode<IModelLayoutViewItem>(layoutViewItemNode.Id);
                                modelLayoutViewItem.ViewItem = modelDetailView.Items.OfType<IModelViewItem>().FirstOrDefault(m => m.Id == layoutViewItemNode.ViewItemId);

                                if (modelLayoutViewItem is IModelNode genericModelNode)
                                {
                                    MapModelNode(genericModelNode, layoutViewItemNode);
                                }

                                if (modelLayoutViewItem is IModelLayoutItem modelLayoutItem)
                                {
                                    MapModelLayoutItem(modelLayoutItem, layoutViewItemNode);
                                }

                                if (modelLayoutViewItem is IModelViewLayoutElement modelViewLayoutElement)
                                {
                                    MapModelViewLayoutElement(modelViewLayoutElement, layoutViewItemNode);
                                }

                                if (modelLayoutViewItem is ISupportControlAlignment modelSupportControlAlignment)
                                {
                                    MapSupportControlAlignment(modelSupportControlAlignment, layoutViewItemNode);
                                }

                                if (modelLayoutViewItem is IModelToolTip modelToolTip)
                                {
                                    MapModelToolTip(modelToolTip, layoutViewItemNode);
                                }

                                if (modelLayoutViewItem is IModelToolTipOptions modelToolTipOptions)
                                {
                                    MapModelToolTipOptions(modelToolTipOptions, layoutViewItemNode);
                                }

                                if (modelLayoutViewItem is IModelLayoutElementWithCaptionOptions modelLayoutElementWithCaptionOptions)
                                {
                                    MapLayoutElementWithCaptionOptions(modelLayoutElementWithCaptionOptions, layoutViewItemNode);
                                }
                                else if (modelLayoutViewItem.ViewItem is IModelLayoutElementWithCaptionOptions modelLayoutElementWithCaptionOptions2)
                                {
                                    MapLayoutElementWithCaptionOptions(modelLayoutElementWithCaptionOptions2, layoutViewItemNode);
                                }

                                if (modelLayoutViewItem is IModelLayoutElementWithCaption modelLayoutElementWithCaption)
                                {
                                    MapCaption(modelLayoutElementWithCaption, layoutViewItemNode);
                                }
                                else if (modelLayoutViewItem.ViewItem is IModelLayoutElementWithCaption modelLayoutElementWithCaption2)
                                {
                                    MapCaption(modelLayoutElementWithCaption2, layoutViewItemNode);
                                }
                                else if (modelLayoutViewItem.ViewItem is not null)
                                {
                                    if (layoutViewItemNode.Caption is not null)
                                    {
                                        modelLayoutViewItem.ViewItem.Caption = layoutViewItemNode.Caption;
                                    }
                                }

                                if (layoutViewItemNode.ViewItemOptions is not null)
                                {
                                    var modelViewItem = modelDetailView
                                        .Items[layoutViewItemNode.ViewItemId];

                                    if (modelViewItem is not null)
                                    {
                                        layoutViewItemNode.ViewItemOptions(modelViewItem);
                                    }
                                }

                                if (layoutViewItemNode is LayoutPropertyEditorItem layoutPropertyEditorItem
                                    && layoutPropertyEditorItem.PropertyEditorOptions is not null)
                                {
                                    var modelViewItem = modelDetailView
                                        .Items[layoutPropertyEditorItem.PropertyEditorId];

                                    if (modelViewItem is IModelPropertyEditor modelPropertyEditor)
                                    {
                                        layoutPropertyEditorItem.PropertyEditorOptions(modelPropertyEditor);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {

                    }
                }
            }

            static IEnumerable<TItem> VisitNodes<TItem>(LayoutItemNode node)
                where TItem : LayoutItemNode
            {
                if (node is TItem targetNode)
                {
                    yield return targetNode;
                }

                if (node is IEnumerable<LayoutItemNode> items)
                {
                    foreach (var item in items)
                    {
                        foreach (var nestedItem in VisitNodes<TItem>(item))
                        {
                            yield return nestedItem;
                        }
                    }
                }
            }

        }

    }
}
