using System;
using System.Collections.Generic;

using DevExpress.ExpressApp.DC;

namespace Xenial.Framework.ModelBuilders
{
    /// <summary>
    /// Class AggregatedPropertyBuilder.
    /// Implements the <see cref="Xenial.Framework.ModelBuilders.IPropertyBuilder{TPropertyType, TClassType}" />
    /// </summary>
    /// <typeparam name="TPropertyType">The type of the t property type.</typeparam>
    /// <typeparam name="TClassType">The type of the t class type.</typeparam>
    /// <seealso cref="Xenial.Framework.ModelBuilders.IPropertyBuilder{TPropertyType, TClassType}" />
    /// <autogeneratedoc />
    [XenialCheckLicence]
    public partial class AggregatedPropertyBuilder<TPropertyType, TClassType> : IAggregatedPropertyBuilder<TPropertyType, TClassType>
    {
        private readonly IEnumerable<IPropertyBuilder<TPropertyType, TClassType>> propertyBuilders;

        IEnumerable<IPropertyBuilder<TPropertyType, TClassType>> IAggregatedPropertyBuilder<TPropertyType, TClassType>.PropertyBuilders
            => propertyBuilders;

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedPropertyBuilder{TPropertyType, TClassType}"/> class.
        /// </summary>
        /// <param name="propertyBuilders">The property builders.</param>
        /// <exception cref="ArgumentNullException">propertyBuilders</exception>
        /// <autogeneratedoc />
        public AggregatedPropertyBuilder(IEnumerable<IPropertyBuilder<TPropertyType, TClassType>> propertyBuilders)
            => this.propertyBuilders = propertyBuilders ?? throw new ArgumentNullException(nameof(propertyBuilders));

        string IPropertyBuilder.PropertyName => throw new NotImplementedException();
        IMemberInfo IPropertyBuilder.MemberInfo => throw new NotImplementedException();

        /// <summary>
        /// Removes the attribute.
        /// </summary>
        /// <typeparam name="TAttribute">The type of the attribute.</typeparam>
        /// <returns>IPropertyBuilder&lt;TPropertyType, TClassType&gt;.</returns>
        /// <autogeneratedoc />
        public IPropertyBuilder<TPropertyType, TClassType> RemoveAttribute<TAttribute>()
            where TAttribute : Attribute
        {
            foreach (var propertyBuilder in propertyBuilders)
            {
                propertyBuilder.RemoveAttribute<TAttribute>();
            }
            return this;
        }

        /// <summary>
        /// Removes the attribute.
        /// </summary>
        /// <param name="attribute">The attribute.</param>
        /// <returns>IPropertyBuilder&lt;TPropertyType, TClassType&gt;.</returns>
        /// <autogeneratedoc />
        public IPropertyBuilder<TPropertyType, TClassType> RemoveAttribute(Attribute attribute)
        {
            foreach (var propertyBuilder in propertyBuilders)
            {
                propertyBuilder.RemoveAttribute(attribute);
            }
            return this;
        }

        /// <summary>
        /// Withes the attribute.
        /// </summary>
        /// <typeparam name="TAttribute">The type of the attribute.</typeparam>
        /// <returns>IPropertyBuilder&lt;TPropertyType, TClassType&gt;.</returns>
        /// <autogeneratedoc />
        public IPropertyBuilder<TPropertyType, TClassType> WithAttribute<TAttribute>()
            where TAttribute : Attribute, new()
        {
            foreach (var propertyBuilder in propertyBuilders)
            {
                propertyBuilder.WithAttribute<TAttribute>();
            }
            return this;
        }

        /// <summary>
        /// Withes the attribute.
        /// </summary>
        /// <typeparam name="TAttribute">The type of the attribute.</typeparam>
        /// <param name="attribute">The attribute.</param>
        /// <returns>IPropertyBuilder&lt;TPropertyType, TClassType&gt;.</returns>
        /// <autogeneratedoc />
        public IPropertyBuilder<TPropertyType, TClassType> WithAttribute<TAttribute>(TAttribute attribute)
            where TAttribute : Attribute
        {
            foreach (var propertyBuilder in propertyBuilders)
            {
                propertyBuilder.WithAttribute(attribute);
            }
            return this;
        }

        /// <summary>
        /// Withes the attribute.
        /// </summary>
        /// <typeparam name="TAttribute">The type of the attribute.</typeparam>
        /// <param name="configureAction">The configure action.</param>
        /// <returns>IPropertyBuilder&lt;TPropertyType, TClassType&gt;.</returns>
        /// <autogeneratedoc />
        public IPropertyBuilder<TPropertyType, TClassType> WithAttribute<TAttribute>(Action<TAttribute> configureAction)
            where TAttribute : Attribute, new()
        {
            foreach (var propertyBuilder in propertyBuilders)
            {
                propertyBuilder.WithAttribute(configureAction);
            }
            return this;
        }

        /// <summary>
        /// Withes the attribute.
        /// </summary>
        /// <typeparam name="TAttribute">The type of the attribute.</typeparam>
        /// <param name="attribute">The attribute.</param>
        /// <param name="configureAction">The configure action.</param>
        /// <returns>IPropertyBuilder&lt;TPropertyType, TClassType&gt;.</returns>
        /// <autogeneratedoc />
        public IPropertyBuilder<TPropertyType, TClassType> WithAttribute<TAttribute>(TAttribute attribute, Action<TAttribute>? configureAction = null)
            where TAttribute : Attribute
        {
            foreach (var propertyBuilder in propertyBuilders)
            {
                propertyBuilder.WithAttribute(attribute, configureAction);
            }
            return this;
        }
    }
}
