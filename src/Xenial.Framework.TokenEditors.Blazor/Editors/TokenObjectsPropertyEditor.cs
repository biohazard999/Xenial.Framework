using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;

using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Blazor.Components;
using DevExpress.ExpressApp.Blazor.Components.Models;
using DevExpress.ExpressApp.Blazor.Editors;
using DevExpress.ExpressApp.Blazor.Editors.Adapters;
using DevExpress.ExpressApp.Editors;
using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp.Utils;

using Microsoft.AspNetCore.Components;

using Xenial.Framework.TokenEditors.Blazor.Editors;

namespace Xenial.Framework.TokenEditors.Blazor.Editors
{
    /// <summary>
    /// Class TokenObjectsPropertyEditor. Implements the
    /// <see cref="DevExpress.ExpressApp.Blazor.Editors.BlazorPropertyEditorBase" />
    /// </summary>
    ///
    /// <seealso cref="BlazorPropertyEditorBase"/>
    /// <seealso cref="IComplexViewItem"/>
    /// <seealso cref="DevExpress.ExpressApp.Blazor.Editors.BlazorPropertyEditorBase">  <autogeneratedoc /></seealso>

    [XenialCheckLicense]
    public sealed partial class TokenObjectsPropertyEditor : BlazorPropertyEditorBase, IComplexViewItem
    {
        private IObjectSpace? objectSpace;

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenObjectsPropertyEditor"/> class.
        /// </summary>
        ///
        /// <param name="objectType">   Type of the object. </param>
        /// <param name="model">        The model. </param>

        public TokenObjectsPropertyEditor(Type objectType, IModelMemberViewItem model) : base(objectType, model) { }

        /// <summary>
        /// Passes the <see cref="T:DevExpress.ExpressApp.XafApplication" /> and
        /// <see cref="T:DevExpress.ExpressApp.IObjectSpace" /> objects to the current
        /// <see cref="T:DevExpress.ExpressApp.Editors.IComplexViewItem" />.
        /// </summary>
        ///
        /// <param name="objectSpace">  An <see cref="T:DevExpress.ExpressApp.IObjectSpace" /> object
        ///                             that provides methods to access the application database. </param>
        /// <param name="application">  An <see cref="T:DevExpress.ExpressApp.XafApplication" /> object
        ///                             that manages the current application. </param>

        public void Setup(IObjectSpace objectSpace, XafApplication application)
            => this.objectSpace = objectSpace;

        /// <summary>   Determines whether [is member setter required]. </summary>
        ///
        /// <returns>   <c>true</c> if [is member setter required]; otherwise, <c>false</c>. </returns>

        protected override bool IsMemberSetterRequired() => false;

        /// <summary>   Creates the component adapter. </summary>
        ///
        /// <exception cref="InvalidOperationException">    Thrown when the requested operation is
        ///                                                 invalid. </exception>
        ///
        /// <returns>   IComponentAdapter. </returns>

        protected override IComponentAdapter CreateComponentAdapter()
        {
            _ = objectSpace ?? throw new InvalidOperationException($"Cannot create '{GetType()} without an {nameof(IObjectSpace)}");
            return new TokenObjectsComponentAdapter(new TokenObjectsInputModel(), objectSpace, Model, () => CurrentObject);
        }
    }

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
    public record TokenObjectsDisplayModel(object Id, string DisplayName);
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member

    /// <summary>
    /// Class TokenObjectsInputModel.
    /// Implements the <see cref="DevExpress.ExpressApp.Blazor.Components.Models.ComponentModelBase" />
    /// </summary>
    /// <seealso cref="DevExpress.ExpressApp.Blazor.Components.Models.ComponentModelBase" />
    /// <autogeneratedoc />
    [XenialCheckLicense]
    public sealed partial class TokenObjectsInputModel : ComponentModelBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenObjectsInputModel"/> class.
        /// </summary>

        public TokenObjectsInputModel()
        {
            Values = new List<TokenObjectsDisplayModel>();
            DataSource = new List<TokenObjectsDisplayModel>();
        }

        /// <summary>   Gets or sets the value. </summary>
        ///
        /// <value> The value. </value>

        public IEnumerable<TokenObjectsDisplayModel> Values { get => GetPropertyValue<IEnumerable<TokenObjectsDisplayModel>>(); set => SetPropertyValue(value); }

        /// <summary>   Gets or sets the data source. </summary>
        ///
        /// <value> The data source. </value>

        public IEnumerable<TokenObjectsDisplayModel> DataSource { get => GetPropertyValue<IEnumerable<TokenObjectsDisplayModel>>(); set => SetPropertyValue(value); }

        /// <summary>   Gets or sets a value indicating whether [read only]. </summary>
        ///
        /// <value> <c>true</c> if [read only]; otherwise, <c>false</c>. </value>

        public bool ReadOnly { get => GetPropertyValue<bool>(); set => SetPropertyValue(value); }

        /// <summary>   Sets the value from UI. </summary>
        ///
        /// <param name="values">   The value. </param>

        public void SetValueFromUI(IEnumerable<TokenObjectsDisplayModel> values)
        {
            Values = values;
            SetPropertyValue(values, notify: false, nameof(Values));
            ValueChanged?.Invoke(this, EventArgs.Empty);
        }

        /// <summary>   Occurs when [value changed]. </summary>
        public event EventHandler? ValueChanged;
    }

    /// <summary>
    /// Class TokenObjectsComponentAdapter.
    /// Implements the <see cref="DevExpress.ExpressApp.Blazor.Editors.Adapters.ComponentAdapterBase" />
    /// </summary>
    /// <seealso cref="DevExpress.ExpressApp.Blazor.Editors.Adapters.ComponentAdapterBase" />
    /// <autogeneratedoc />
    [XenialCheckLicense]
    public sealed partial class TokenObjectsComponentAdapter : ComponentAdapterBase
    {
        private readonly IObjectSpace objectSpace;
        private readonly IModelMemberViewItem model;
        private readonly Func<object> currentObjectAccessor;
        private readonly System.Collections.IList databaseDataSource;
        private System.Collections.IList? currentObject;

        /// <summary>   Gets the component model. </summary>
        ///
        /// <value> The component model. </value>

        public TokenObjectsInputModel ComponentModel { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenObjectsComponentAdapter"/> class.
        /// </summary>
        ///
        /// <exception cref="ArgumentNullException">    Thrown when one or more required arguments are
        ///                                             null. </exception>
        ///
        /// <param name="componentModel">           The component model. </param>
        /// <param name="objectSpace">              The object space. </param>
        /// <param name="model">                    The model. </param>
        /// <param name="currentObjectAccessor">    The model. </param>

        public TokenObjectsComponentAdapter(TokenObjectsInputModel componentModel, IObjectSpace objectSpace, IModelMemberViewItem model, Func<object> currentObjectAccessor)
        {
            _ = componentModel ?? throw new ArgumentNullException(nameof(componentModel));
            _ = objectSpace ?? throw new ArgumentNullException(nameof(objectSpace));
            _ = model ?? throw new ArgumentNullException(nameof(model));
            _ = currentObjectAccessor ?? throw new ArgumentNullException(nameof(currentObjectAccessor));
            this.objectSpace = objectSpace;
            this.model = model;
            this.currentObjectAccessor = currentObjectAccessor;
            ComponentModel = componentModel;
            ComponentModel.ValueChanged += ComponentModel_ValueChanged;

            var dataSource = new List<TokenObjectsDisplayModel>();
            databaseDataSource = objectSpace.GetObjects(model.ModelMember.MemberInfo.ListElementType);
            foreach (var item in databaseDataSource)
            {
                var key = objectSpace.GetKeyValue(item);
                var display = model.ModelMember.MemberInfo.ListElementTypeInfo.DefaultMember?.GetValue(item)?.ToString();

                dataSource.Add(new TokenObjectsDisplayModel(key, display ?? string.Empty));
            }

            ComponentModel.DataSource = dataSource;
        }

        private void ComponentModel_ValueChanged(object? sender, EventArgs e)
        {
            if (currentObject is not null)
            {
                foreach (var item in ComponentModel.Values ?? Enumerable.Empty<TokenObjectsDisplayModel>())
                {
                    var key = item.Id;
                    var objectInList = currentObject
                        .OfType<object>()
                        .FirstOrDefault(ds => objectSpace.GetKeyValue(ds)?.Equals(key) == true);
                    if (objectInList is not null)
                    {
                        continue;
                    }
                    var objectToAdd = objectSpace.GetObjectByKey(model.ModelMember.MemberInfo.ListElementType, key);
                    if (objectToAdd is null)
                    {
                        objectToAdd = databaseDataSource
                          .OfType<object>()
                          .FirstOrDefault(ds => objectSpace.GetKeyValue(ds)?.Equals(key) == true);
                    }
                    if (objectToAdd is not null)
                    {
                        currentObject.Add(objectToAdd);
                    }
                }

                var keys = (ComponentModel.Values ?? Enumerable.Empty<TokenObjectsDisplayModel>()).Select(c => c.Id).ToList();

                var itemsToRemove = currentObject.OfType<object>().Select(c => new
                {
                    Object = c,
                    Key = objectSpace.GetKeyValue(c)
                }).Where(c => c.Key is not null && !keys.Contains(c.Key))
                  .Select(c => c.Object)
                  .ToList();

                foreach (var itemToRemove in itemsToRemove)
                {
                    currentObject.Remove(itemToRemove);
                }

                var uiObject = currentObjectAccessor.Invoke();

                objectSpace.SetModified(uiObject);
            }
        }

        /// <summary>   Gets the value. </summary>
        ///
        /// <returns>   object?. </returns>

        public override object? GetValue() => currentObject;

        /// <summary>   Sets the value. </summary>
        ///
        /// <param name="value">    The value. </param>

        public override void SetValue(object value)
        {
            if (value is System.Collections.IList list)
            {
                currentObject = list;
                var dataSource = new List<TokenObjectsDisplayModel>();
                foreach (var item in list)
                {
                    var key = objectSpace.GetKeyValue(item);
                    var display = model.ModelMember.MemberInfo.ListElementTypeInfo.DefaultMember?.GetValue(item)?.ToString();

                    dataSource.Add(new TokenObjectsDisplayModel(key, display ?? string.Empty));
                }
                ComponentModel.Values = dataSource;
            }
            else
            {
                currentObject = null;
                ComponentModel.Values = new List<TokenObjectsDisplayModel>();
            }
        }

        /// <summary>   Sets the allow edit. </summary>
        ///
        /// <param name="allowEdit">    The allow edit. </param>

        public override void SetAllowEdit(bool allowEdit) => _ = true;

        /// <summary>   Sets the allow null. </summary>
        ///
        /// <param name="allowNull">    The allow null. </param>

        public override void SetAllowNull(bool allowNull) => _ = true;

        /// <summary>   Sets the display format. </summary>
        ///
        /// <param name="displayFormat">    The display format. </param>

        public override void SetDisplayFormat(string displayFormat) => _ = true;

        /// <summary>   Sets the edit mask. </summary>
        ///
        /// <param name="editMask"> The edit mask. </param>

        public override void SetEditMask(string editMask) => _ = true;

        /// <summary>   Sets the type of the edit mask. </summary>
        ///
        /// <param name="editMaskType"> Type of the edit mask. </param>

        public override void SetEditMaskType(EditMaskType editMaskType) => _ = true;

        /// <summary>   Sets the error icon. </summary>
        ///
        /// <param name="errorIcon">    The error icon. </param>

        public override void SetErrorIcon(ImageInfo errorIcon) => _ = true;

        /// <summary>   Sets the error message. </summary>
        ///
        /// <param name="errorMessage"> The error message. </param>

        public override void SetErrorMessage(string errorMessage) => _ = true;

        /// <summary>   Sets the is password. </summary>
        ///
        /// <param name="isPassword">   The is password. </param>

        public override void SetIsPassword(bool isPassword) => _ = true;

        /// <summary>   Sets the maximum length. </summary>
        ///
        /// <param name="maxLength">    The maximum length. </param>

        public override void SetMaxLength(int maxLength) => _ = true;

        /// <summary>   Sets the null text. </summary>
        ///
        /// <param name="nullText"> The null text. </param>

        public override void SetNullText(string nullText) => _ = true;

        /// <summary>   Creates the component. </summary>
        ///
        /// <returns>   Microsoft.AspNetCore.Components.RenderFragment. </returns>

        protected override RenderFragment CreateComponent()
            => ComponentModelObserver.Create(ComponentModel, TokenObjectsComponent.Create(ComponentModel));
    }
}

namespace DevExpress.ExpressApp.Editors
{
    /// <summary>   Class TokenObjectsPropertyEditorExtensions. </summary>
    public static class TokenObjectsPropertyEditorBlazorExtensions
    {
        /// <summary>   Uses the token objects property editor. </summary>
        ///
        /// <exception cref="ArgumentNullException">    Thrown when one or more required arguments are
        ///                                             null. </exception>
        ///
        /// <param name="editorDescriptorsFactory"> The editor descriptors factory. </param>
        ///
        /// <returns>   EditorDescriptorsFactory. </returns>

        public static EditorDescriptorsFactory UseTokenObjectsPropertyEditorsBlazor(this EditorDescriptorsFactory editorDescriptorsFactory)
        {
            _ = editorDescriptorsFactory ?? throw new ArgumentNullException(nameof(editorDescriptorsFactory));

            editorDescriptorsFactory.RegisterPropertyEditor(
                Xenial.Framework.TokenEditors.PubTernal.TokenEditorAliases.TokenObjectsPropertyEditor,
                typeof(IList<>),
                typeof(TokenObjectsPropertyEditor),
                false
            );

            return editorDescriptorsFactory;
        }

        /// <summary>   Uses the token objects property editor. </summary>
        ///
        /// <exception cref="ArgumentNullException">    Thrown when one or more required arguments are
        ///                                             null. </exception>
        ///
        /// <typeparam name="T">    Generic type parameter. </typeparam>
        /// <param name="editorDescriptorsFactory"> The editor descriptors factory. </param>
        ///
        /// <returns>   EditorDescriptorsFactory. </returns>

        public static EditorDescriptorsFactory UseTokenObjectsPropertyEditorsBlazor<T>(this EditorDescriptorsFactory editorDescriptorsFactory)
        {
            _ = editorDescriptorsFactory ?? throw new ArgumentNullException(nameof(editorDescriptorsFactory));

            editorDescriptorsFactory.RegisterPropertyEditor(
                Xenial.Framework.TokenEditors.PubTernal.TokenEditorAliases.TokenObjectsPropertyEditor,
                typeof(IList<T>),
                typeof(TokenObjectsPropertyEditor),
                false
            );

            editorDescriptorsFactory.RegisterPropertyEditor(
                Xenial.Framework.TokenEditors.PubTernal.TokenEditorAliases.TokenObjectsPropertyEditor,
                typeof(BindingList<T>),
                typeof(TokenObjectsPropertyEditor),
                false
            );

            return editorDescriptorsFactory;
        }

        /// <summary>   Uses the token objects property editor. </summary>
        ///
        /// <exception cref="ArgumentNullException">    Thrown when one or more required arguments are
        ///                                             null. </exception>
        ///
        /// <typeparam name="T">    Generic type parameter. </typeparam>
        /// <param name="editorDescriptorsFactory"> The editor descriptors factory. </param>
        ///
        /// <returns>   EditorDescriptorsFactory. </returns>

        public static EditorDescriptorsFactory UseTokenObjectsPropertyEditorsForTypeBlazor<T>(this EditorDescriptorsFactory editorDescriptorsFactory)
        {
            _ = editorDescriptorsFactory ?? throw new ArgumentNullException(nameof(editorDescriptorsFactory));

            editorDescriptorsFactory.RegisterPropertyEditor(
                Xenial.Framework.TokenEditors.PubTernal.TokenEditorAliases.TokenObjectsPropertyEditor,
                typeof(T),
                typeof(TokenObjectsPropertyEditor),
                false
            );

            return editorDescriptorsFactory;
        }
    }
}
