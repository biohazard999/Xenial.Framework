using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using DevExpress.ExpressApp.Blazor.Components;
using DevExpress.ExpressApp.Blazor.Components.Models;
using DevExpress.ExpressApp.Blazor.Editors;
using DevExpress.ExpressApp.Blazor.Editors.Adapters;
using DevExpress.ExpressApp.Editors;
using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp.Utils;

using Microsoft.AspNetCore.Components;

using Xenial.Framework.TokenEditors.Blazor.Editors;

namespace Xenial.Framework.TokenEditors.Blazor.Editors
{
    /// <summary>
    /// Class TokenStringPropertyEditor.
    /// Implements the <see cref="DevExpress.ExpressApp.Blazor.Editors.BlazorPropertyEditorBase" />
    /// </summary>
    /// <seealso cref="DevExpress.ExpressApp.Blazor.Editors.BlazorPropertyEditorBase" />
    /// <autogeneratedoc />
    public class TokenStringPropertyEditor : BlazorPropertyEditorBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenStringPropertyEditor"/> class.
        /// </summary>
        /// <param name="objectType">Type of the object.</param>
        /// <param name="model">The model.</param>
        /// <autogeneratedoc />
        public TokenStringPropertyEditor(Type objectType, IModelMemberViewItem model) : base(objectType, model) { }

        /// <summary>
        /// Creates the component adapter.
        /// </summary>
        /// <returns>IComponentAdapter.</returns>
        protected override IComponentAdapter CreateComponentAdapter() => new TokenStringComponentAdapter(new TokenStringInputModel
        {
            DataSource = (Model.PredefinedValues ?? string.Empty).Split(";").ToList()
        });
    }

    /// <summary>
    /// Class TokenStringInputModel.
    /// Implements the <see cref="DevExpress.ExpressApp.Blazor.Components.Models.ComponentModelBase" />
    /// </summary>
    /// <seealso cref="DevExpress.ExpressApp.Blazor.Components.Models.ComponentModelBase" />
    /// <autogeneratedoc />
    public class TokenStringInputModel : ComponentModelBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenStringInputModel"/> class.
        /// </summary>
        /// <autogeneratedoc />
        public TokenStringInputModel()
        {
            Values = new List<string>();
            DataSource = new List<string>();
        }

        /// <summary>
        /// Gets or sets the value.
        /// </summary>
        /// <value>The value.</value>
        /// <autogeneratedoc />
        public IEnumerable<string> Values { get => GetPropertyValue<IEnumerable<string>>(); set => SetPropertyValue(value); }

        /// <summary>
        /// Gets or sets the data source.
        /// </summary>
        /// <value>The data source.</value>
        /// <autogeneratedoc />
        public IEnumerable<string> DataSource { get => GetPropertyValue<IEnumerable<string>>(); set => SetPropertyValue(value); }

        /// <summary>
        /// Gets or sets a value indicating whether [read only].
        /// </summary>
        /// <value><c>true</c> if [read only]; otherwise, <c>false</c>.</value>
        /// <autogeneratedoc />
        public bool ReadOnly { get => GetPropertyValue<bool>(); set => SetPropertyValue(value); }

        /// <summary>
        /// Sets the value from UI.
        /// </summary>
        /// <param name="values">The value.</param>
        /// <autogeneratedoc />
        public void SetValueFromUI(IEnumerable<string> values)
        {
            Values = values ?? new List<string>();
            SetPropertyValue(Values, notify: false, nameof(Values));
            ValueChanged?.Invoke(this, EventArgs.Empty);
        }

        /// <summary>
        /// Occurs when [value changed].
        /// </summary>
        /// <autogeneratedoc />
        public event EventHandler? ValueChanged;
    }

    /// <summary>
    /// Class TokenStringComponentAdapter.
    /// Implements the <see cref="DevExpress.ExpressApp.Blazor.Editors.Adapters.ComponentAdapterBase" />
    /// </summary>
    /// <seealso cref="DevExpress.ExpressApp.Blazor.Editors.Adapters.ComponentAdapterBase" />
    /// <autogeneratedoc />
    public class TokenStringComponentAdapter : ComponentAdapterBase
    {
        /// <summary>
        /// Gets the component model.
        /// </summary>
        /// <value>The component model.</value>
        /// <autogeneratedoc />
        public TokenStringInputModel ComponentModel { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenStringComponentAdapter"/> class.
        /// </summary>
        /// <param name="componentModel">The component model.</param>
        /// <exception cref="System.ArgumentNullException">componentModel</exception>
        /// <autogeneratedoc />
        public TokenStringComponentAdapter(TokenStringInputModel componentModel)
        {
            ComponentModel = componentModel ?? throw new ArgumentNullException(nameof(componentModel));
            ComponentModel.ValueChanged += ComponentModel_ValueChanged;
        }

        private void ComponentModel_ValueChanged(object? sender, EventArgs? e) => RaiseValueChanged();

        /// <summary>
        /// Gets the value.
        /// </summary>
        /// <returns>System.Object.</returns>
        /// <autogeneratedoc />
        public override object? GetValue() => string.Join(";", ComponentModel.Values);

        /// <summary>
        /// Sets the value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <autogeneratedoc />
        public override void SetValue(object? value) => ComponentModel.Values = (value?.ToString() ?? string.Empty).Split(';').ToList();

        /// <summary>
        /// Sets the allow edit.
        /// </summary>
        /// <param name="allowEdit">if set to <c>true</c> [allow edit].</param>
        /// <autogeneratedoc />
        public override void SetAllowEdit(bool allowEdit) => ComponentModel.ReadOnly = !allowEdit;

        /// <summary>
        /// Sets the allow null.
        /// </summary>
        /// <param name="allowNull">if set to <c>true</c> [allow null].</param>
        /// <autogeneratedoc />
        public override void SetAllowNull(bool allowNull) => _ = true;

        /// <summary>
        /// Sets the display format.
        /// </summary>
        /// <param name="displayFormat">The display format.</param>
        /// <autogeneratedoc />
        public override void SetDisplayFormat(string displayFormat) => _ = true;

        /// <summary>
        /// Sets the edit mask.
        /// </summary>
        /// <param name="editMask">The edit mask.</param>
        /// <autogeneratedoc />
        public override void SetEditMask(string editMask) => _ = true;

        /// <summary>
        /// Sets the type of the edit mask.
        /// </summary>
        /// <param name="editMaskType">Type of the edit mask.</param>
        /// <autogeneratedoc />
        public override void SetEditMaskType(EditMaskType editMaskType) => _ = true;

        /// <summary>
        /// Sets the error icon.
        /// </summary>
        /// <param name="errorIcon">The error icon.</param>
        /// <autogeneratedoc />
        public override void SetErrorIcon(ImageInfo errorIcon) => _ = true;

        /// <summary>
        /// Sets the error message.
        /// </summary>
        /// <param name="errorMessage">The error message.</param>
        /// <autogeneratedoc />
        public override void SetErrorMessage(string errorMessage) => _ = true;

        /// <summary>
        /// Sets the is password.
        /// </summary>
        /// <param name="isPassword">if set to <c>true</c> [is password].</param>
        /// <autogeneratedoc />
        public override void SetIsPassword(bool isPassword) => _ = true;

        /// <summary>
        /// Sets the maximum length.
        /// </summary>
        /// <param name="maxLength">The maximum length.</param>
        /// <autogeneratedoc />
        public override void SetMaxLength(int maxLength) => _ = true;

        /// <summary>
        /// Sets the null text.
        /// </summary>
        /// <param name="nullText">The null text.</param>
        public override void SetNullText(string nullText) => _ = true;

        /// <summary>
        /// Creates the component.
        /// </summary>
        /// <returns>RenderFragment.</returns>
        /// <autogeneratedoc />
        protected override RenderFragment CreateComponent()
            => ComponentModelObserver.Create(ComponentModel, TokenStringComponent.Create(ComponentModel));
    }
}

namespace DevExpress.ExpressApp.Editors
{
    /// <summary>
    /// Class TokenStringPropertyEditorBlazorExtensions.
    /// </summary>
    /// <autogeneratedoc />
    public static class TokenStringPropertyEditorBlazorExtensions
    {
        /// <summary>
        /// Uses the token objects property editor.
        /// </summary>
        /// <param name="editorDescriptorsFactory">The editor descriptors factory.</param>
        /// <returns>EditorDescriptorsFactory.</returns>
        /// <exception cref="System.ArgumentNullException">editorDescriptorsFactory</exception>
        /// <autogeneratedoc />
        public static EditorDescriptorsFactory UseTokenStringPropertyEditorsBlazor(this EditorDescriptorsFactory editorDescriptorsFactory)
        {
            _ = editorDescriptorsFactory ?? throw new ArgumentNullException(nameof(editorDescriptorsFactory));

            editorDescriptorsFactory.RegisterPropertyEditor(
                Xenial.Framework.TokenEditors.EditorAliases.TokenStringPropertyEditor,
                typeof(string),
                typeof(TokenStringPropertyEditor),
                false
            );

            return editorDescriptorsFactory;
        }
    }
}
