using System;

using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp.Win.Editors;

using Xenial.Framework.WebView.Win.Editors;
using Xenial.Framework.WebView.Win.Helpers;

namespace Xenial.Framework.WebView.Win.Editors
{
    /// <summary>
    /// Class WebViewHtmlStringPropertyEditor. Implements the
    /// <see cref="DevExpress.ExpressApp.Win.Editors.WinPropertyEditor" />
    /// </summary>
    ///
    /// <seealso cref="WinPropertyEditor"/>
    /// <seealso cref="DevExpress.ExpressApp.Win.Editors.WinPropertyEditor">    <autogeneratedoc /></seealso>

    [XenialCheckLicence]
    public sealed partial class WebViewHtmlStringPropertyEditor : WinPropertyEditor
    {
        /// <summary>
        /// Indicates whether the caption of the current Property Editor should be visible in a UI.
        /// </summary>
        ///
        /// <value> true if the current Property's caption is visible; otherwise, false. </value>

        public override bool IsCaptionVisible => false;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebViewHtmlStringPropertyEditor"/> class.
        /// </summary>
        ///
        /// <param name="objectType">   Type of the object. </param>
        /// <param name="model">        The model. </param>

        public WebViewHtmlStringPropertyEditor(Type objectType, IModelMemberViewItem model) : base(objectType, model)
        {
            ControlBindingProperty = nameof(Control.HtmlContent);
            ControlCreated -= WebViewUriPropertyEditor_ControlCreated;
            ControlCreated += WebViewUriPropertyEditor_ControlCreated;
        }

        /// <summary>   Determines whether [is member setter required]. </summary>
        ///
        /// <returns>   <c>true</c> if [is member setter required]; otherwise, <c>false</c>. </returns>

        protected override bool IsMemberSetterRequired() => false;

        private async void WebViewUriPropertyEditor_ControlCreated(object? sender, EventArgs e)
            => await Control.EnsureCoreWebView2AndInstallAsync().ConfigureAwait(false);

        /// <summary>   Releases unmanaged and - optionally - managed resources. </summary>
        ///
        /// <param name="disposing">    <c>true</c> to release both managed and unmanaged resources;
        ///                             <c>false</c> to release only unmanaged resources. </param>

        protected override void Dispose(bool disposing)
        {
            ControlCreated -= WebViewUriPropertyEditor_ControlCreated;
            if (Control is not null && !Control.IsDisposed && !Control.Disposing)
            {
                //Fixes https://github.com/MicrosoftEdge/WebView2Feedback/issues/228
                //Hide before dispose or WebView throws NRE
                Control.Visible = false;
                Control.Parent = null;
                Control.Dispose();
            }
            base.Dispose(disposing);
        }

        /// <summary>   Creates the control core. </summary>
        ///
        /// <returns>   System.Object. </returns>

        protected override object CreateControlCore() => new XenialHtmlStringWebView2();

        /// <summary>
        /// Provides access to the control that represents the current Property Editor in a UI.
        /// </summary>
        ///
        /// <value>
        /// A <see cref="T:System.Windows.Forms.Control" /> object used to display the current Property
        /// Editor in a UI.
        /// </value>

        public new XenialHtmlStringWebView2 Control => (XenialHtmlStringWebView2)base.Control;
    }

    /// <summary>
    /// Class XenialHtmlStringWebView. This class cannot be inherited.
    /// Implements the <see cref="Microsoft.Web.WebView2.WinForms.WebView2" />
    /// </summary>
    /// <seealso cref="Microsoft.Web.WebView2.WinForms.WebView2" />
    /// <autogeneratedoc />
    [XenialCheckLicence]
    public sealed partial class XenialHtmlStringWebView2 : Microsoft.Web.WebView2.WinForms.WebView2
    {
        private bool isReady;

        /// <summary>
        /// Initializes a new instance of the <see cref="XenialHtmlStringWebView2"/> class.
        /// </summary>

        public XenialHtmlStringWebView2() => CoreWebView2Ready += XenialWebView2_CoreWebView2Ready;

        private async void XenialWebView2_CoreWebView2Ready(object? sender, EventArgs e)
        {
            CoreWebView2Ready -= XenialWebView2_CoreWebView2Ready;
            isReady = true;
            await this.EnsureCoreWebView2AndInstallAsync().ConfigureAwait(true);
            NavigateToHtmlContent();
        }

        private void NavigateToHtmlContent()
        {
            try
            {
                NavigateToString(string.IsNullOrEmpty(htmlContent) ? "about:blank" : htmlContent);
            }
            catch (ArgumentException)
            {
                NavigateToString("<html><head></head><body>Content is to long.</body></html>");
            }
        }

        private string? htmlContent;

        /// <summary>   Gets or sets the content of the HTML. </summary>
        ///
        /// <value> The content of the HTML. </value>

        public string? HtmlContent
        {
            get => htmlContent;
            set
            {
                htmlContent = value;
                if (isReady)
                {
                    NavigateToHtmlContent();
                }
            }
        }
    }
}

namespace DevExpress.ExpressApp.Editors
{
    /// <summary>
    /// Class WebViewUriPropertyEditorExtensions.
    /// </summary>
    /// <autogeneratedoc />
    public static partial class WebViewPropertyEditorExtensions
    {
        /// <summary>   Uses the web view URI property editor. </summary>
        ///
        /// <exception cref="ArgumentNullException">    editorDescriptorsFactory. </exception>
        ///
        /// <param name="editorDescriptorsFactory"> The editor descriptors factory. </param>
        ///
        /// <returns>   EditorDescriptorsFactory. </returns>

        public static EditorDescriptorsFactory UseWebViewHtmlStringPropertyEditorWin(this EditorDescriptorsFactory editorDescriptorsFactory)
        {
            _ = editorDescriptorsFactory ?? throw new ArgumentNullException(nameof(editorDescriptorsFactory));

            editorDescriptorsFactory.RegisterPropertyEditor(
                Xenial.Framework.WebView.PubTernal.WebViewEditorAliases.WebViewHtmlStringPropertyEditor,
                typeof(string),
                typeof(WebViewHtmlStringPropertyEditor),
                false
            );

            return editorDescriptorsFactory;
        }
    }
}
