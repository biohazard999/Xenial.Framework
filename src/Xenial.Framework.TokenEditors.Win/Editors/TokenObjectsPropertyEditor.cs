using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;

using DevExpress.Accessibility;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Editors;
using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp.Win.Editors;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Drawing;
using DevExpress.XtraEditors.Registrator;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraEditors.ViewInfo;

using Xenial.Framework.TokenEditors.Win.Editors;

namespace Xenial.Framework.TokenEditors.Win.Editors
{
    /// <summary>
    /// Class TokenObjectsPropertyEditor.
    /// Implements the <see cref="DevExpress.ExpressApp.Win.Editors.DXPropertyEditor" />
    /// </summary>
    /// <seealso cref="DevExpress.ExpressApp.Win.Editors.DXPropertyEditor" />
    public class TokenObjectsPropertyEditor : DXPropertyEditor, IComplexViewItem
    {
        private bool wasModified;
        private IObjectSpace? objectSpace;
        private XafApplication? application;
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenObjectsPropertyEditor"/> class.
        /// </summary>
        /// <param name="objectType">Type of the object.</param>
        /// <param name="model">The model.</param>
        /// <autogeneratedoc />
        public TokenObjectsPropertyEditor(Type objectType, IModelMemberViewItem model) : base(objectType, model)
            => ControlBindingProperty = nameof(Control.BindableEditValue);

        /// <summary>
        /// Passes the <see cref="T:DevExpress.ExpressApp.XafApplication" /> and <see cref="T:DevExpress.ExpressApp.IObjectSpace" /> objects to the current <see cref="T:DevExpress.ExpressApp.Editors.IComplexViewItem" />.
        /// </summary>
        /// <param name="objectSpace">An <see cref="T:DevExpress.ExpressApp.IObjectSpace" /> object that provides methods to access the application database.</param>
        /// <param name="application">An <see cref="T:DevExpress.ExpressApp.XafApplication" /> object that manages the current application.</param>
        /// <autogeneratedoc />
        public void Setup(IObjectSpace objectSpace, XafApplication application)
            => (this.objectSpace, this.application) = (objectSpace, application);

        /// <summary>
        /// Creates the repository item.
        /// </summary>
        /// <returns>RepositoryItem.</returns>
        /// <autogeneratedoc />
        protected override RepositoryItem CreateRepositoryItem() => new XenialRepositoryItemTokenEdit
        {
            ObjectSpace = objectSpace
        };

        /// <summary>
        /// Creates the control core.
        /// </summary>
        /// <returns>System.Object.</returns>
        /// <exception cref="System.NotImplementedException"></exception>
        /// <autogeneratedoc />
        protected override object CreateControlCore() => new XenialTokenEdit();

        /// <summary>
        /// Determines whether [is member setter required].
        /// </summary>
        /// <returns><c>true</c> if [is member setter required]; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        protected override bool IsMemberSetterRequired() => false;

        /// <summary>
        /// Setups the repository item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <autogeneratedoc />
        protected override void SetupRepositoryItem(RepositoryItem item)
        {
            base.SetupRepositoryItem(item);
            if (item is XenialRepositoryItemTokenEdit tokenItem && objectSpace is not null)
            {
                tokenItem.BeginUpdate();
                try
                {
                    tokenItem.ObjectSpace = objectSpace;
                    //tokenItem.MemberInfo = MemberInfo;

                    tokenItem.DataSource = objectSpace.GetObjects(MemberInfo.ListElementType);
                    tokenItem.ValueMember = objectSpace.GetKeyPropertyName(MemberInfo.ListElementType);
                    tokenItem.DisplayMember = MemberInfo.ListElementTypeInfo.DefaultMember?.BindingName;

                    tokenItem.SelectedItemsChanged += TokenItem_SelectedItemsChanged;
                    tokenItem.Validating += TokenItem_Validating;
                }
                finally
                {
                    tokenItem.EndUpdate();
                }
            }
        }

        private void TokenItem_Validating(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (objectSpace is not null && wasModified)
            {
                objectSpace.SetModified(CurrentObject);
            }
            wasModified = false;
        }

        private void TokenItem_SelectedItemsChanged(object sender, ListChangedEventArgs e)
        {
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
                wasModified = true;
                if (Control.EditValue is System.ComponentModel.BindingList<object> list
                    && objectSpace is not null
                    && Control.BindableEditValue is System.Collections.IList listToAdd)
                {
                    var key = list[e.NewIndex];

                    var objectToAdd = objectSpace.GetObjectByKey(MemberInfo.ListElementType, key);
                    if (objectToAdd == null && Control.Properties.DataSource is System.Collections.IList dataSource)
                    {
                        objectToAdd = dataSource
                            .OfType<object>()
                            .FirstOrDefault(ds => objectSpace.GetKeyValue(ds)?.Equals(key) == true);
                    }
                    if (objectToAdd is not null)
                    {
                        listToAdd.Add(objectToAdd);
                    }
                }
            }

            if (e.ListChangedType == ListChangedType.ItemDeleted)
            {
                wasModified = true;
                if (Control.EditValue is BindingList<object> list
                    && objectSpace is not null
                    && Control.BindableEditValue is System.Collections.IList listToRemove)
                {
                    var key = list[e.NewIndex];

                    var objectToRemove = objectSpace.GetObjectByKey(MemberInfo.ListElementType, key);

                    if (objectToRemove == null && Control.Properties.DataSource is System.Collections.IList dataSource)
                    {
                        objectToRemove = dataSource
                            .OfType<object>()
                            .FirstOrDefault(ds => objectSpace.GetKeyValue(ds)?.Equals(key) == true);
                    }

                    if (objectToRemove is not null)
                    {
                        listToRemove.Remove(objectToRemove);
                    }
                }
            }
        }

        /// <summary>
        /// Provides access to the control that represents the current Property Editor in a UI.
        /// </summary>
        /// <value>A DevExpress.XtraEditors.BaseEdit object representing a control used to display the current Property Editor in a UI.</value>
        /// <autogeneratedoc />
        public new XenialTokenEdit Control => (XenialTokenEdit)base.Control;
    }

    /// <summary>
    /// Class XenialRepositoryItemTokenEdit.
    /// Implements the <see cref="DevExpress.XtraEditors.Repository.RepositoryItemTokenEdit" />
    /// </summary>
    /// <seealso cref="DevExpress.XtraEditors.Repository.RepositoryItemTokenEdit" />
    /// <autogeneratedoc />
    [UserRepositoryItem(nameof(RegisterCustomEdit))]
    public class XenialRepositoryItemTokenEdit : RepositoryItemTokenEdit
    {
        static XenialRepositoryItemTokenEdit() => RegisterCustomEdit();

        /// <summary>
        /// The custom edit name
        /// </summary>
        /// <autogeneratedoc />
        public const string XenialTokenEditName = nameof(XenialTokenEdit);
        private IObjectSpace? objectSpace;

        /// <summary>
        /// Gets the name of the editor type.
        /// </summary>
        /// <value>The name of the editor type.</value>
        /// <autogeneratedoc />
        public override string EditorTypeName => XenialTokenEditName;

        /// <summary>
        /// Registers the custom edit.
        /// </summary>
        /// <autogeneratedoc />
        public static void RegisterCustomEdit()
            => EditorRegistrationInfo.Default.Editors.Add(
                new EditorClassInfo(
                    XenialTokenEditName,
                    typeof(XenialTokenEdit),
                    typeof(XenialRepositoryItemTokenEdit),
                    typeof(TokenEditViewInfo),
                    new TokenEditPainter(),
                    false,
                    null,
                    typeof(TokenEditAccessible)
                )
            );


        /// <summary>
        /// Gets or sets the object space.
        /// </summary>
        /// <value>The object space.</value>
        /// <autogeneratedoc />
        public IObjectSpace? ObjectSpace
        {
            get => objectSpace;
            set
            {
                objectSpace = value;
                if (objectSpace != value)
                {
                    objectSpace = value;
                    OnPropertiesChanged();
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="XenialRepositoryItemTokenEdit"/> class.
        /// </summary>
        /// <autogeneratedoc />
        public XenialRepositoryItemTokenEdit()
            => EditValueType = TokenEditValueType.List;

        /// <summary>
        /// Assigns the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <autogeneratedoc />
        public override void Assign(RepositoryItem item)
        {
            BeginUpdate();
            try
            {
                base.Assign(item);
                if (item is XenialRepositoryItemTokenEdit source)
                {
                    objectSpace = source.ObjectSpace;
                }
            }
            finally
            {
                EndUpdate();
            }
        }
    }

    /// <summary>
    /// Class XenialTokenEdit.
    /// Implements the <see cref="DevExpress.XtraEditors.TokenEdit" />
    /// </summary>
    /// <seealso cref="DevExpress.XtraEditors.TokenEdit" />
    /// <autogeneratedoc />
    public class XenialTokenEdit : TokenEdit
    {
        static XenialTokenEdit() => XenialRepositoryItemTokenEdit.RegisterCustomEdit();

        /// <summary>
        /// Gets the name of the editor type.
        /// </summary>
        /// <value>The name of the editor type.</value>
        /// <autogeneratedoc />
        public override string EditorTypeName => XenialRepositoryItemTokenEdit.XenialTokenEditName;

        /// <summary>
        /// Gets the properties.
        /// </summary>
        /// <value>The properties.</value>
        /// <autogeneratedoc />
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public new XenialRepositoryItemTokenEdit Properties => (XenialRepositoryItemTokenEdit)base.Properties;

        private System.Collections.IList? bindableEditValue;
        /// <summary>
        /// Gets or sets the bindable edit value.
        /// </summary>
        /// <value>The bindable edit value.</value>
        /// <autogeneratedoc />
        public System.Collections.IList? BindableEditValue
        {
            get => bindableEditValue;
            set
            {
                bindableEditValue = value;
                if (value is System.Collections.IList list && Properties.ObjectSpace is not null)
                {
                    if (EditValue == null)
                    {
                        EditValue = new BindingList<object>();
                    }
                    if (EditValue is System.Collections.IList editList)
                    {
                        foreach (var item in list)
                        {
                            editList.Add(Properties.ObjectSpace.GetKeyValue(item));
                        }
                    }
                }
            }
        }
    }
}

namespace DevExpress.ExpressApp.Editors
{
    /// <summary>
    /// Class TokenObjectsPropertyEditorExtensions.
    /// </summary>
    /// <autogeneratedoc />
    public static class TokenObjectsPropertyEditorWinExtensions
    {
        /// <summary>
        /// Uses the token objects property editor.
        /// </summary>
        /// <param name="editorDescriptorsFactory">The editor descriptors factory.</param>
        /// <returns>EditorDescriptorsFactory.</returns>
        /// <exception cref="System.ArgumentNullException">editorDescriptorsFactory</exception>
        /// <autogeneratedoc />
        public static EditorDescriptorsFactory UseTokenObjectsPropertyEditorsWin(this EditorDescriptorsFactory editorDescriptorsFactory)
        {
            _ = editorDescriptorsFactory ?? throw new ArgumentNullException(nameof(editorDescriptorsFactory));

            editorDescriptorsFactory.RegisterPropertyEditor(
                Xenial.Framework.TokenEditors.EditorAliases.TokenObjectsPropertyEditor,
                typeof(IList<>),
                typeof(TokenObjectsPropertyEditor),
                false
            );

            //editorDescriptorsFactory.RegisterPropertyEditor(
            //    Xenial.Framework.TokenEditors.EditorAliases.TokenObjectsPropertyEditor,
            //    typeof(IList<>),
            //    typeof(TokenObjectsPropertyEditor),
            //    false
            //);

            return editorDescriptorsFactory;
        }

        /// <summary>
        /// Uses the token objects property editor.
        /// </summary>
        /// <param name="editorDescriptorsFactory">The editor descriptors factory.</param>
        /// <returns>EditorDescriptorsFactory.</returns>
        /// <exception cref="System.ArgumentNullException">editorDescriptorsFactory</exception>
        /// <autogeneratedoc />
        public static EditorDescriptorsFactory UseTokenObjectsPropertyEditorsWin<T>(this EditorDescriptorsFactory editorDescriptorsFactory)
        {
            _ = editorDescriptorsFactory ?? throw new ArgumentNullException(nameof(editorDescriptorsFactory));

            editorDescriptorsFactory.RegisterPropertyEditor(
                Xenial.Framework.TokenEditors.EditorAliases.TokenObjectsPropertyEditor,
                typeof(IList<T>),
                typeof(TokenObjectsPropertyEditor),
                false
            );

            editorDescriptorsFactory.RegisterPropertyEditor(
                Xenial.Framework.TokenEditors.EditorAliases.TokenObjectsPropertyEditor,
                typeof(BindingList<T>),
                typeof(TokenObjectsPropertyEditor),
                false
            );

            return editorDescriptorsFactory;
        }

        /// <summary>
        /// Uses the token objects property editor.
        /// </summary>
        /// <param name="editorDescriptorsFactory">The editor descriptors factory.</param>
        /// <returns>EditorDescriptorsFactory.</returns>
        /// <exception cref="System.ArgumentNullException">editorDescriptorsFactory</exception>
        /// <autogeneratedoc />
        public static EditorDescriptorsFactory UseTokenObjectsPropertyEditorsForTypeWin<T>(this EditorDescriptorsFactory editorDescriptorsFactory)
        {
            _ = editorDescriptorsFactory ?? throw new ArgumentNullException(nameof(editorDescriptorsFactory));

            editorDescriptorsFactory.RegisterPropertyEditor(
                Xenial.Framework.TokenEditors.EditorAliases.TokenObjectsPropertyEditor,
                typeof(T),
                typeof(TokenObjectsPropertyEditor),
                false
            );

            return editorDescriptorsFactory;
        }
    }
}
