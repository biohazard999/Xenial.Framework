@inject IJSRuntime JS

<div class="xenial__web-view__uri-component">
    @if (ComponentModel is not null)
    {
        <x-frame-bypass src="@ComponentModel.Value"
                        @attributes="@ComponentModel.Attributes"
                        style="width: 100%; min-height: 500px; height: 60vh; border: none;"
                        ></x-frame-bypass>
    }
</div>

@code
{
    /// <summary>	Gets or sets the component model. </summary>
    ///
    /// <value>	The component model. </value>

    [Parameter]
    public WebViewUriInputModel? ComponentModel { get; set; }

    /// <summary>	Creates a new RenderFragment. </summary>
    ///
    /// <param name="componentModel">	The component model. </param>
    ///
    /// <returns>	A RenderFragment. </returns>

    public static RenderFragment Create(WebViewUriInputModel componentModel) => @<WebViewUriComponent ComponentModel="@componentModel" />;

    /// <summary>	Values changed. </summary>
    ///
    /// <param name="value">	The value. </param>

    void ValuesChanged(Uri? value)
    {
        if (ComponentModel is not null)
        {
            ComponentModel.SetValueFromUI(value);
        }
    }

#if NET5_0

    /// <summary>	Executes the 'after render asynchronous' action. </summary>
    ///
    /// <param name="firstRender">	True to first render. </param>
    ///
    /// <returns>	A Task. </returns>

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import", $"./_content/{GetType().Assembly.GetName().Name}/WebViewUriComponent.razor.js");

            await module.InvokeVoidAsync("loadWebViewUriComponent");
        }
    }
#endif
}
