//HintName: BasicXpoWithParentAndGrandParentBuilder.BasicXpo.Builder.g.cs
// <auto-generated />

using System;
using System.Runtime.CompilerServices;

namespace MyProject
{
    [CompilerGenerated]
    internal partial class BasicXpoBuilder : BasicXpoBuilder<MyProject.BasicXpo, BasicXpoBuilder> { }
    
    [CompilerGenerated]
    internal abstract partial class BasicXpoBuilder<TClass, TBuilder>
        : BasicXpoParentBuilder<TClass, TBuilder>
        where TClass : MyProject.BasicXpo
        where TBuilder : BasicXpoBuilder<TClass, TBuilder>
    {
        protected override TClass CreateTarget()
        {
            if(this.WasSessionSet)
            {
                return (TClass)new MyProject.BasicXpo(this.Session);
            }
            
            throw new System.InvalidOperationException($"Could not create instance of type [MyProject.BasicXpo] without a Session.{System.Environment.NewLine}Make sure to use the [WithSession] method when using the [{this.GetType().FullName}] type.");
        }
        
        protected string OwnStringProperty { get; set; }
        protected bool WasOwnStringPropertyCalled { get; private set; }
        
        public TBuilder WithOwnStringProperty(string ownStringProperty)
        {
            this.OwnStringProperty = ownStringProperty;
            this.WasOwnStringPropertyCalled = true;
            return This;
        }
        
        public override TClass Build()
        {
            TClass target = base.CreateTarget();
            
            if(this.WasOwnStringPropertyCalled)
            {
                target.OwnStringProperty = this.OwnStringProperty;
            }
            
            return target;
        }
    }
}
