//HintName: BasicXpoWithReference.XpoObject.Builder.g.cs
// <auto-generated />

using System;
using System.Runtime.CompilerServices;

namespace MyProject
{
    [CompilerGenerated]
    internal partial class XpoObjectBuilder : XpoObjectBuilder<MyProject.XpoObject, XpoObjectBuilder> { }
    
    [CompilerGenerated]
    internal abstract partial class XpoObjectBuilder<TClass, TBuilder>
        where TClass : MyProject.XpoObject
        where TBuilder : XpoObjectBuilder<TClass, TBuilder>
    {
        protected DevExpress.Xpo.Session Session { get; set; }
        protected bool WasSessionSet { get; private set; }
        
        public TBuilder WithSession(DevExpress.Xpo.Session session)
        {
            this.Session = session;
            this.WasSessionSet = true;
            return This;
        }
        
        protected TBuilder This
        {
            get
            {
                return (TBuilder)this;
            }
        }
        
        protected virtual TClass CreateTarget()
        {
            if(this.WasSessionSet)
            {
                return (TClass)new MyProject.XpoObject(this.Session);
            }
            
            throw new System.InvalidOperationException($"Could not create instance of type [MyProject.XpoObject] without a Session.{System.Environment.NewLine}Make sure to use the [WithSession] method when using the [{this.GetType().FullName}] type.");
        }
        
        protected string StringProperty { get; set; }
        protected bool WasStringPropertyCalled { get; private set; }
        
        public TBuilder WithStringProperty(string stringProperty)
        {
            this.StringProperty = stringProperty;
            this.WasStringPropertyCalled = true;
            return This;
        }
        
        protected MyProject.ReferenceXpo ReferenceProperty { get; set; }
        protected bool WasReferencePropertyCalled { get; private set; }
        
        public TBuilder WithReferenceProperty(MyProject.ReferenceXpo referenceProperty)
        {
            this.ReferenceProperty = referenceProperty;
            this.WasReferencePropertyCalled = true;
            return This;
        }
        
        protected MyProject.ReferenceXpoBuilder ReferencePropertyBuilder { get; set; }
        protected bool WasReferencePropertyBuilderCalled { get; private set; }
        
        public TBuilder WithReferenceProperty(Action<MyProject.ReferenceXpoBuilder> referencePropertyBuilder)
        {
            if(referencePropertyBuilder != null)
            {
                MyProject.ReferenceXpoBuilder builder = new MyProject.ReferenceXpoBuilder();
                this.WithReferenceProperty(builder);
                referencePropertyBuilder.Invoke(builder);
            }
            return This;
        }
        
        public TBuilder WithReferenceProperty(MyProject.ReferenceXpoBuilder referencePropertyBuilder)
        {
            this.ReferencePropertyBuilder = referencePropertyBuilder;
            this.WasReferencePropertyBuilderCalled = true;
            if(this.WasSessionSet)
            {
                this.ReferencePropertyBuilder.WithSession(this.Session);
            }
            return This;
        }
        
        public virtual TClass Build()
        {
            TClass target = this.CreateTarget();
            
            if(this.WasStringPropertyCalled)
            {
                target.StringProperty = this.StringProperty;
            }
            
            if(this.WasReferencePropertyBuilderCalled)
            {
                this.WithReferenceProperty(this.ReferencePropertyBuilder.Build());
            }
            
            if(this.WasReferencePropertyCalled)
            {
                target.ReferenceProperty = this.ReferenceProperty;
            }
            
            return target;
        }
    }
}
