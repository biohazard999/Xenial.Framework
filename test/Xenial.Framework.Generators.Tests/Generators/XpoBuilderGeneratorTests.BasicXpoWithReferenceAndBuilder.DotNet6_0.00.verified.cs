//HintName: BasicXpoWithReference.ReferenceXpo.Builder.g.cs
// <auto-generated />

using System;
using System.Runtime.CompilerServices;

namespace MyProject
{
    [CompilerGenerated]
    internal partial class ReferenceXpoBuilder : ReferenceXpoBuilder<MyProject.ReferenceXpo, ReferenceXpoBuilder> { }
    
    [CompilerGenerated]
    internal abstract partial class ReferenceXpoBuilder<TClass, TBuilder>
        where TClass : MyProject.ReferenceXpo
        where TBuilder : ReferenceXpoBuilder<TClass, TBuilder>
    {
        protected DevExpress.Xpo.Session Session { get; set; }
        protected bool WasSessionSet { get; private set; }
        
        public TBuilder WithSession(DevExpress.Xpo.Session session)
        {
            this.Session = session;
            this.WasSessionSet = true;
            return This;
        }
        
        protected TBuilder This
        {
            get
            {
                return (TBuilder)this;
            }
        }
        
        protected virtual TClass CreateTarget()
        {
            if(this.WasSessionSet)
            {
                return (TClass)new MyProject.ReferenceXpo(this.Session);
            }
            
            throw new System.InvalidOperationException($"Could not create instance of type [MyProject.ReferenceXpo] without a Session.{System.Environment.NewLine}Make sure to use the [WithSession] method when using the [{this.GetType().FullName}] type.");
        }
        
        protected string ReferenceStringProperty { get; set; }
        protected bool WasReferenceStringPropertyCalled { get; private set; }
        
        public TBuilder WithReferenceStringProperty(string referenceStringProperty)
        {
            this.ReferenceStringProperty = referenceStringProperty;
            this.WasReferenceStringPropertyCalled = true;
            return This;
        }
        
        public virtual TClass Build()
        {
            TClass target = this.CreateTarget();
            
            if(this.WasReferenceStringPropertyCalled)
            {
                target.ReferenceStringProperty = this.ReferenceStringProperty;
            }
            
            return target;
        }
    }
}
