//HintName: MyNormalClassWithoutCtor.MyNormalClassWithoutCtor.Builder.g.cs
// <auto-generated />

using System;
using System.Runtime.CompilerServices;

namespace MyProject
{
    [CompilerGenerated]
    internal partial class MyNormalClassWithoutCtorBuilder : MyNormalClassWithoutCtorBuilder<MyProject.MyNormalClassWithoutCtor, MyNormalClassWithoutCtorBuilder> { }
    
    [CompilerGenerated]
    internal partial abstract class MyNormalClassWithoutCtorBuilder<TClass, TBuilder>
        where TClass : MyProject.MyNormalClassWithoutCtor
        where TBuilder : MyNormalClassWithoutCtorBuilder<TClass, TBuilder>
    {
        protected TBuilder This
        {
            get
            {
                return (TBuilder)this;
            }
        }
        
        protected virtual TClass CreateTarget()
        {
            return (TClass)new MyProject.MyNormalClassWithoutCtor();
        }
        
        public virtual TClass Build()
        {
            TClass target = this.CreateTarget();
            
            return target;
        }
    }
}
