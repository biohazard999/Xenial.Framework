//HintName: BasicDoubleProperty.BasicDoubleProperty.Builder.g.cs
// <auto-generated />

using System;
using System.Runtime.CompilerServices;

namespace MyProject
{
    [CompilerGenerated]
    internal partial class BasicDoublePropertyBuilder : BasicDoublePropertyBuilder<MyProject.BasicDoubleProperty, BasicDoublePropertyBuilder> { }
    
    [CompilerGenerated]
    internal partial abstract class BasicDoublePropertyBuilder<TClass, TBuilder>
        where TClass : MyProject.BasicDoubleProperty
        where TBuilder : BasicDoublePropertyBuilder<TClass, TBuilder>
    {
        protected TBuilder This
        {
            get
            {
                return (TBuilder)this;
            }
        }
        
        protected virtual TClass CreateTarget()
        {
            return (TClass)new MyProject.BasicDoubleProperty();
        }
        
        protected double DoubleProperty { get; set; }
        protected bool WasDoublePropertyCalled { get; private set; }
        
        public TBuilder WithDoubleProperty(double doubleProperty)
        {
            this.DoubleProperty = doubleProperty;
            this.WasDoublePropertyCalled = true;
            return This;
        }
        
        protected double DoubleProperty2 { get; set; }
        protected bool WasDoubleProperty2Called { get; private set; }
        
        public TBuilder WithDoubleProperty2(double doubleProperty2)
        {
            this.DoubleProperty2 = doubleProperty2;
            this.WasDoubleProperty2Called = true;
            return This;
        }
        
        public virtual TClass Build()
        {
            TClass target = this.CreateTarget();
            
            if(this.WasDoublePropertyCalled)
            {
                target.DoubleProperty = this.DoubleProperty;
            }
            
            if(this.WasDoubleProperty2Called)
            {
                target.DoubleProperty2 = this.DoubleProperty2;
            }
            
            return target;
        }
    }
}
