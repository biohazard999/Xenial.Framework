//HintName: BasicStringProperty.BasicStringProperty.Builder.g.cs
// <auto-generated />

using System;
using System.Runtime.CompilerServices;

namespace MyProject
{
    [CompilerGenerated]
    internal partial class BasicStringPropertyBuilder : BasicStringPropertyBuilder<MyProject.BasicStringProperty, BasicStringPropertyBuilder> { }
    
    [CompilerGenerated]
    internal abstract partial class BasicStringPropertyBuilder<TClass, TBuilder>
        where TClass : MyProject.BasicStringProperty
        where TBuilder : BasicStringPropertyBuilder<TClass, TBuilder>
    {
        protected TBuilder This
        {
            get
            {
                return (TBuilder)this;
            }
        }
        
        protected virtual TClass CreateTarget()
        {
            return (TClass)new MyProject.BasicStringProperty();
        }
        
        protected string StringProperty { get; set; }
        protected bool WasStringPropertyCalled { get; private set; }
        
        public TBuilder WithStringProperty(string stringProperty)
        {
            this.StringProperty = stringProperty;
            this.WasStringPropertyCalled = true;
            return This;
        }
        
        protected string StringProperty2 { get; set; }
        protected bool WasStringProperty2Called { get; private set; }
        
        public TBuilder WithStringProperty2(string stringProperty2)
        {
            this.StringProperty2 = stringProperty2;
            this.WasStringProperty2Called = true;
            return This;
        }
        
        public virtual TClass Build()
        {
            TClass target = this.CreateTarget();
            
            if(this.WasStringPropertyCalled)
            {
                target.StringProperty = this.StringProperty;
            }
            
            if(this.WasStringProperty2Called)
            {
                target.StringProperty2 = this.StringProperty2;
            }
            
            return target;
        }
    }
}
