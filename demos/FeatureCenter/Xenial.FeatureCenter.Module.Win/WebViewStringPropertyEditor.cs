using System;
using System.Runtime.InteropServices;

using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp.Win;
using DevExpress.ExpressApp.Win.Editors;
using DevExpress.Persistent.Base;

namespace Xenial.FeatureCenter.Module.Win
{
    /// <summary>
    /// Class WebViewUriPropertyEditor.
    /// Implements the <see cref="DevExpress.ExpressApp.Win.Editors.WinPropertyEditor" />
    /// </summary>
    /// <seealso cref="DevExpress.ExpressApp.Win.Editors.WinPropertyEditor" />
    /// <autogeneratedoc />
    //[XenialCheckLicence]
    public sealed partial class WebViewStringPropertyEditor : WinPropertyEditor
    {
        /// <summary>
        /// Indicates whether the caption of the current Property Editor should be visible in a UI.
        /// </summary>
        /// <value>true if the current Property's caption is visible; otherwise, false.</value>
        /// <autogeneratedoc />
        public override bool IsCaptionVisible => false;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebViewUriPropertyEditor"/> class.
        /// </summary>
        /// <param name="objectType">Type of the object.</param>
        /// <param name="model">The model.</param>
        /// <autogeneratedoc />
        public WebViewStringPropertyEditor(Type objectType, IModelMemberViewItem model) : base(objectType, model)
        {
            ControlBindingProperty = nameof(Control.HtmlContent);
            ControlCreated -= WebViewUriPropertyEditor_ControlCreated;
            ControlCreated += WebViewUriPropertyEditor_ControlCreated;
        }

        protected override bool IsMemberSetterRequired() => false;

        private async void WebViewUriPropertyEditor_ControlCreated(object sender, EventArgs e)
        {
            try
            {
                await Control.EnsureCoreWebView2Async();
            }
            catch (COMException ex)
            {
                Tracing.LogError(new Guid("FF39957F-C7E7-4498-B6B5-79317D53EAB7"), ex);
                WinApplication.Messaging.ShowException(ex.ToString());
            }
            catch (Exception ex)
            {
                Tracing.LogError(new Guid("0985D675-A93B-48B7-AC88-E3622DD86DAC"), ex);
                WinApplication.Messaging.ShowException(ex.ToString());
            }
        }

        /// <summary>
        /// Releases unmanaged and - optionally - managed resources.
        /// </summary>
        /// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        /// <autogeneratedoc />
        protected override void Dispose(bool disposing)
        {
            ControlCreated -= WebViewUriPropertyEditor_ControlCreated;
            if (Control is not null && !Control.IsDisposed && !Control.Disposing)
            {
                //Fixes https://github.com/MicrosoftEdge/WebView2Feedback/issues/228
                //Hide before dispose or WebView throws NRE
                Control.Visible = false;
                Control.Parent = null;
                Control.Dispose();
            }
            base.Dispose(disposing);
        }

        /// <summary>
        /// Creates the control core.
        /// </summary>
        /// <returns>System.Object.</returns>
        /// <autogeneratedoc />
        protected override object CreateControlCore() => new XenialWebView2();

        /// <summary>
        /// Provides access to the control that represents the current Property Editor in a UI.
        /// </summary>
        /// <value>A <see cref="T:System.Windows.Forms.Control" /> object used to display the current Property Editor in a UI.</value>
        /// <autogeneratedoc />
        public new XenialWebView2 Control => (XenialWebView2)base.Control;
    }

    public sealed partial class XenialWebView2 : Microsoft.Web.WebView2.WinForms.WebView2
    {
        private bool isReady;

        public XenialWebView2() => CoreWebView2Ready += XenialWebView2_CoreWebView2Ready;

        private async void XenialWebView2_CoreWebView2Ready(object sender, EventArgs e)
        {
            CoreWebView2Ready -= XenialWebView2_CoreWebView2Ready;
            isReady = true;
            await EnsureCoreWebView2Async();
            NavigateToString(string.IsNullOrEmpty(htmlContent) ? "about:blank" : htmlContent);
        }

        private string? htmlContent;
        public string? HtmlContent
        {
            get => htmlContent;
            set
            {
                htmlContent = value;
                if (isReady)
                {
                    NavigateToString(string.IsNullOrEmpty(htmlContent) ? "about:blank" : htmlContent);
                }
            }
        }
    }
}
