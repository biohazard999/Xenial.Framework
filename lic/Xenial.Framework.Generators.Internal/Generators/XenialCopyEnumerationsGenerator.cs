using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;

using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Actions;
using DevExpress.ExpressApp.Templates;
using DevExpress.Persistent.Base;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using Xenial.Framework.MsBuild;

namespace Xenial.Framework.Generators.Internal.Generators;

public class XenialCopyEnumerationsGenerator : XenialBaseGenerator, IXenialSourceGenerator
{
    public XenialCopyEnumerationsGenerator(IDictionary<string, string>? constantsToInject) : base(constantsToInject) { }

    public Compilation Execute(GeneratorExecutionContext context, Compilation compilation, IList<TypeDeclarationSyntax> types)
    {
        compilation = CopyEnumeration<PredefinedCategory>(context, compilation);
        compilation = CopyEnumeration<ActionMeaning>(context, compilation);
        compilation = CopyEnumeration<ActionItemPaintStyle>(context, compilation);
        compilation = CopyEnumeration<SelectionDependencyType>(context, compilation);
        compilation = CopyEnumeration<TargetObjectsCriteriaMode>(context, compilation);
        compilation = CopyEnumeration<Nesting>(context, compilation);
        compilation = CopyEnumeration<ViewType>(context, compilation);

        return compilation;
    }

    private Compilation CopyEnumeration<T>(
        GeneratorExecutionContext context,
        Compilation compilation,
        string prefix = "Xenial"
    )
        where T : struct, Enum
    {
        var builder = CurlyIndenter.Create();
        builder.WriteLine("// <auto-generated />");

        var @namespace = typeof(T).Namespace.Replace("DevExpress", prefix);
        var enumName = typeof(T).Name;

        builder.WriteLine("using System;");
        builder.WriteLine("using System.Runtime.CompilerServices;");
        builder.WriteLine();
        builder.WriteLine("using Xenial;");
        builder.WriteLine();

        using (builder.OpenBrace($"namespace {@namespace}"))
        {
            builder.WriteLine("[CompilerGenerated]");
            builder.WriteLine($"[XenialTypeForward(\"{typeof(T).FullName}\")]");
            using (builder.OpenBrace($"{{visibility}} enum Xenial{enumName}"))
            {
                foreach (T value in typeof(T).GetEnumValues())
                {
                    var name = Enum.GetName(typeof(T), value);
                    var val = Convert.ChangeType(value, value.GetTypeCode(), CultureInfo.InvariantCulture);
                    builder.WriteLine($"{name} = {val},");
                }
            }
        }

        ConstantsToInject[$"Xenial{enumName}"] = builder.ToString();

        return AddSource(context, compilation, builder, enumName);
    }
}
