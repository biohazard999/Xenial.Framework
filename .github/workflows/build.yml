name: Xenial.Framework

on:
  schedule:
    - cron: "30 0 * * *"
  push:
    branches: [ main ]
    tags: [v*]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2
    - name: Fetch all history for all tags and branches
      run: |
        git fetch --prune --unshallow
        git submodule init
        git submodule update
    - name: Setup .NETCORE2.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.1.x
    - name: Setup .NETCORE3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET5
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Build
      run: dotnet run --project build/build.csproj pack
      env:
          DEVEXPRESS_NUGET_FEED: ${{secrets.DEVEXPRESS_NUGET_FEED}}
    - uses: actions/upload-artifact@v2
      if: runner.os == 'Windows' && startsWith(github.ref, 'refs/tags/v')
      with:
        name: nuget
        path: artifacts/nuget/
    - name: publish:publish:framework.featurecenter.xenial.io
      if: runner.os == 'Windows'
      run: dotnet run --project build/build.csproj publish:framework.featurecenter.xenial.io
      env:
          DEVEXPRESS_NUGET_FEED: ${{secrets.DEVEXPRESS_NUGET_FEED}}
          XENIAL_FEATURECENTER_DEFAULTCONNECTIONSTRING: ${{secrets.XENIAL_FEATURECENTER_DEFAULTCONNECTIONSTRING}}
    - name: deploy:publish:framework.featurecenter.xenial.io
      if: runner.os == 'Windows' && startsWith(github.ref, 'refs/tags/v')
      run: dotnet run --project build/build.csproj deploy:framework.featurecenter.xenial.io -s
      env:
          DEVEXPRESS_NUGET_FEED: ${{secrets.DEVEXPRESS_NUGET_FEED}}
          WEBDEPLOY_IP: ${{secrets.WEBDEPLOY_IP}}
          WEBDEPLOY_USER: ${{secrets.WEBDEPLOY_USER}}
          WEBDEPLOY_PASS: ${{secrets.WEBDEPLOY_PASS}}
    - name: Create Release
      id: create_release
      if: runner.os == 'Windows' && startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: ''
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      if: runner.os == 'Windows' && startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./my-artifact.zip
        asset_name: my-artifact.zip
        asset_content_type: application/zip
  docs:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Fetch all history for all tags and branches
      run: |
        git fetch --prune --unshallow

    # Remove global json cause wyam needs 2.2
    - name: Delete global.json
      run: |
        del global.json
    - name: Setup .NET Core 2.2
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.2.x

    # Install with a tool location to trick tool resolution
    - name: Install Wyam.Tool
      run: dotnet tool install --tool-path c:\dotnet-tools Wyam.Tool
      env:
        DEVEXPRESS_NUGET_FEED: ${{secrets.DEVEXPRESS_NUGET_FEED}}

    # Run from the installed tool location
    - name: Build
      run: c:\dotnet-tools\wyam.exe docs -o ..\artifacts\docs

    - uses: actions/upload-artifact@v2
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        name: docs
        path: artifacts/docs/
  deploy-docs:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [docs]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: docs
          path: artifacts/docs/
      - name: Upload ftp
        uses: sebastianpopp/ftp-action@releases/v2
        with:
          host: ${{ secrets.FTP_HOST }}
          user: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASS }}
          localDir: artifacts/docs/
  deploy-packages:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - name: Fetch all history for all tags and branches
        run: |
          git fetch --prune --unshallow
          git submodule init
          git submodule update
      - uses: actions/download-artifact@v2
        with:
          name: nuget
          path: artifacts/nuget/
      - name: Setup .NETCORE3.1
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x
      - name: Setup .NET5
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Publish to nuget.org
        run: dotnet run --project build/build.csproj deploy.nuget
        env:
          NUGET_AUTH_TOKEN: ${{secrets.NUGET_API_KEY}}
          DEVEXPRESS_NUGET_FEED: ${{secrets.DEVEXPRESS_NUGET_FEED}}
